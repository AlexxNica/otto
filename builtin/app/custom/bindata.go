// Code generated by go-bindata.
// sources:
// data/dev/Vagrantfile.tpl
// data/sentinels/packer_path.tpl
// data/sentinels/terraform_path.tpl
// data/sentinels/vagrant_path.tpl
// DO NOT EDIT!

package custom

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDevVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x4b\x4f\xe3\x3c\x14\xdd\xe7\x57\xdc\xcf\x3c\x54\x24\x92\x7c\x20\x34\x8b\x0e\xa0\x61\x78\x08\x36\x1d\x44\x3b\xb3\x41\x28\x72\x93\x9b\xc4\xc2\xb1\x2d\xdb\xe9\x43\x6d\xff\xfb\x5c\x27\x2d\x03\x62\x31\xb3\x68\x64\x5f\x9f\x73\x7c\x1f\xc7\xfd\xc5\x2b\xcb\x95\x4f\x72\xad\x4a\x51\xb5\x16\x07\xec\x94\x1d\x41\xa1\x61\xdd\x87\xd6\x11\x40\xbf\x4a\x66\x4d\x32\xd5\x0b\xb8\x00\x56\x73\x57\x8b\x5c\x5b\x93\x1a\x8b\xb9\x70\xf8\xe5\x8c\x45\x04\xdc\x83\x31\xfa\xd6\x80\xd3\x0d\x82\xf3\x6d\x59\x7e\x60\x1b\xab\x67\xc2\x09\xad\x80\xb9\x1a\xa5\x64\xc7\x20\x94\x14\x0a\x87\xb0\xef\x72\x2b\x8c\xef\x45\xee\x74\xab\x0a\xee\x03\x70\x97\x57\xbf\x1b\x88\x12\xb8\x5a\x1e\x11\x6a\x75\x00\xa5\xb6\x50\x08\x4b\x1a\xb4\xdc\x31\x32\x8a\xb8\xa4\xc0\x19\x1c\x6c\x08\x16\xce\x29\xe1\x54\x7b\xaf\xd3\x3f\xa8\x78\xb5\x0a\x74\xa9\xb5\x49\xae\x29\xea\xd1\xc2\x66\xc3\x3e\x64\xeb\x96\x2a\xc7\x22\x2b\xb5\x2c\xe8\x94\x11\x23\x88\x11\xea\x38\x2c\xfe\xb5\x30\x96\x17\xb0\xb7\x22\xc2\x06\x0e\x0f\x61\x4a\x8d\xdb\x6e\xd3\x86\x0b\x95\xb8\x9a\xf5\xc5\xa0\x2a\x42\x3d\x94\x74\xd7\x82\x27\xe4\x45\x28\xcc\xd7\x08\xa5\xe5\x55\x83\xca\xd3\x86\x7b\x98\x23\xb4\x0e\x81\x3b\xe0\x50\xa0\x09\xec\xd5\x1b\x24\x33\xdc\xd7\x6b\x1b\xc8\x9b\x4e\xe9\x99\xcd\x9a\x39\xb7\x98\x95\x6d\xc8\x8f\x12\xdb\x05\xe6\xda\xbe\x3a\xdf\x75\x83\xbd\x24\xc8\xf3\xba\x9b\xba\xe2\x0d\x86\x99\x7f\x2a\x8f\x9a\x30\x08\x87\xbd\x39\x4c\x8f\x01\x30\x09\x2a\x3e\x95\x98\xcd\x1a\xdb\xaa\x4c\x98\x8c\x9a\xfa\x4a\x1e\xb8\x80\x92\x4b\x87\x1d\x8c\x8a\x8b\xfa\xef\xe7\xb6\x85\xe6\x0e\x0d\xb7\x5c\x4a\x94\xae\x17\x3f\x06\xdd\xeb\xeb\x77\xa6\x7b\xc3\xa4\xed\x94\x26\xd6\xc6\x27\xa7\xc9\xff\x67\x6c\x2b\xdc\x89\x6f\x5d\x44\xe8\xf3\xf3\xf1\xf5\xd3\xc3\xe3\x24\x72\xe8\x21\xc6\x28\xda\x83\x60\x81\x18\x17\x98\x0f\x21\x7c\x5b\x8f\x94\x4a\xd3\x70\x55\xc0\x5c\xf8\x1a\x74\xeb\x4d\xeb\x41\xea\xaa\xc2\x02\xa6\xb4\x54\xda\xd3\xa8\x9d\x91\x7c\x89\x45\xa4\x71\x70\x04\x2b\xd8\xff\x06\xa7\x97\x87\x27\xb0\xee\x91\x16\x62\xdf\x49\xc3\x25\xa4\x64\xbb\x54\xb5\x52\x7e\x85\xcd\xdb\x8d\x84\x1a\xee\xb4\x39\xd0\x7b\x29\xc5\x82\xf4\x1b\x74\x8e\x57\x18\x69\xd9\xa9\x62\x5e\x6b\x60\xcf\x81\xf1\x42\x57\xb0\xad\xc2\xf5\xd6\xfe\x42\x55\x30\x1e\xdf\x77\x96\x2f\xb9\x0b\x76\x25\x5d\xa1\x22\x7a\x10\xff\x41\x65\xd1\x00\xfb\xe9\xf0\x66\x34\xa6\xa4\x19\xa4\xe8\xf3\xd4\xb9\x3a\xfc\x8a\xac\x6f\x38\x5c\xbe\x4b\x8f\x6c\xa5\x42\xe3\xba\x5b\xdf\x11\xd7\xe0\x5a\x9a\x80\x47\x84\x98\xff\x4d\x86\x04\x34\xf6\x04\x87\x76\x26\x72\xda\x90\xbd\x2d\x92\xad\xac\x8f\x4a\x11\x45\xb8\x30\xda\x7a\xb8\xb9\xfd\xfe\x70\x35\xca\xee\x9e\x7e\x8c\x26\xb7\xa3\x9b\x0b\xa5\x95\x08\x6f\x8e\xe7\x5e\xcc\x68\x38\x5a\x02\x7b\x50\x44\x93\x32\x54\x7a\x3f\x99\x3c\x8e\xa1\xb0\x74\x66\xbb\x92\xaf\x8c\x4f\x92\x84\x45\xbb\xeb\xb8\xf1\x71\x45\x83\x6d\x0d\x3d\x67\xfc\x14\x16\xbd\x14\xc4\xcb\x2e\xe4\xe9\x1f\xce\x85\x3c\xe2\xda\x7b\xe3\xa2\xad\x33\x7e\x07\x00\x00\xff\xff\x8c\x1d\x1b\xcd\xfb\x04\x00\x00"

func dataDevVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataDevVagrantfileTpl,
		"data/dev/Vagrantfile.tpl",
	)
}

func dataDevVagrantfileTpl() (*asset, error) {
	bytes, err := dataDevVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dev/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataSentinelsPacker_pathTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x1c\x8d\x41\x0a\x83\x40\x14\x43\xf7\x73\x8a\x9c\xa0\x57\x69\x17\xdd\x97\x3f\x35\xc5\xc1\xd1\x91\xdf\x8c\xa5\x88\x77\xf7\xe3\x2a\xbc\x84\xf0\xf6\x1d\xb9\x97\x3a\xbc\x56\x7b\x4f\xf4\x08\x8d\x38\x8e\x94\x9e\x23\x71\x81\xe5\xb6\x11\xe5\x0b\xc3\x66\xb5\x13\x4e\x1b\x90\xff\xb8\x4b\x0d\x26\x78\x5f\x54\x66\x22\x68\x5a\xda\x0f\x8a\xa7\x38\xaf\xd5\xc4\x14\x65\xec\xf8\x34\xc7\xe3\x32\xdc\xd2\x19\x00\x00\xff\xff\x1c\x02\xe8\xeb\x73\x00\x00\x00"

func dataSentinelsPacker_pathTplBytes() ([]byte, error) {
	return bindataRead(
		_dataSentinelsPacker_pathTpl,
		"data/sentinels/packer_path.tpl",
	)
}

func dataSentinelsPacker_pathTpl() (*asset, error) {
	bytes, err := dataSentinelsPacker_pathTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sentinels/packer_path.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataSentinelsTerraform_pathTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\x8e\x4b\x0e\x83\x30\x0c\x44\xf7\x39\xc5\x9c\xa0\x57\xe9\x86\x3d\x32\x8d\x2b\x22\x12\x1c\xb9\x0e\x28\x42\xdc\xbd\x86\xaa\xcb\x79\xfe\xbc\x39\x0e\x44\xae\x59\xfa\x68\xac\x4a\x6f\xd1\x32\x56\xb2\x19\xe7\x19\xc2\x30\x33\xee\x40\x93\x6c\x8c\xf4\x01\x61\xa3\xdc\x18\xca\x14\x31\x75\x3c\xcd\x04\x64\xd0\xb6\x5a\x2a\x0c\x4f\xcb\x2a\x3b\xf6\xd9\x61\x4c\xca\x2f\x13\xed\xc1\x71\x16\x59\xae\x4d\x37\xc0\xfc\xef\xf0\xd7\xa1\x48\x6c\xf9\x3e\xfd\x35\xf1\xf1\x65\xaa\xf5\x11\xbe\x01\x00\x00\xff\xff\xc8\xc6\x72\x2b\x9e\x00\x00\x00"

func dataSentinelsTerraform_pathTplBytes() ([]byte, error) {
	return bindataRead(
		_dataSentinelsTerraform_pathTpl,
		"data/sentinels/terraform_path.tpl",
	)
}

func dataSentinelsTerraform_pathTpl() (*asset, error) {
	bytes, err := dataSentinelsTerraform_pathTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sentinels/terraform_path.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataSentinelsVagrant_pathTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\xcd\x41\x0a\xc2\x40\x0c\x85\xe1\xfd\x9c\xe2\x9d\xc0\xab\xb8\x11\xb7\xe5\xd5\x09\xce\xa0\x4e\x24\xa6\x29\xa5\xf4\xee\x06\x5d\xfe\x1f\x0f\xde\xbe\xa3\x4a\x4c\xc1\xbb\x71\xf8\xf4\xa6\x37\x1c\x47\x29\x97\x26\xf8\x05\x67\x0d\x41\xff\x80\x08\x3e\x17\x81\x09\x2b\xe6\x0d\x67\x77\x05\x1d\xb6\x0c\xef\x2f\x41\xd6\x63\xe8\x8a\xb5\x25\xd6\x6e\x72\x73\xb5\xad\x24\xe7\x02\xd7\xff\x01\xfa\x38\x95\x6f\x00\x00\x00\xff\xff\xd1\xf8\x61\x5e\x74\x00\x00\x00"

func dataSentinelsVagrant_pathTplBytes() ([]byte, error) {
	return bindataRead(
		_dataSentinelsVagrant_pathTpl,
		"data/sentinels/vagrant_path.tpl",
	)
}

func dataSentinelsVagrant_pathTpl() (*asset, error) {
	bytes, err := dataSentinelsVagrant_pathTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sentinels/vagrant_path.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/dev/Vagrantfile.tpl": dataDevVagrantfileTpl,
	"data/sentinels/packer_path.tpl": dataSentinelsPacker_pathTpl,
	"data/sentinels/terraform_path.tpl": dataSentinelsTerraform_pathTpl,
	"data/sentinels/vagrant_path.tpl": dataSentinelsVagrant_pathTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"dev": &bintree{nil, map[string]*bintree{
			"Vagrantfile.tpl": &bintree{dataDevVagrantfileTpl, map[string]*bintree{
			}},
		}},
		"sentinels": &bintree{nil, map[string]*bintree{
			"packer_path.tpl": &bintree{dataSentinelsPacker_pathTpl, map[string]*bintree{
			}},
			"terraform_path.tpl": &bintree{dataSentinelsTerraform_pathTpl, map[string]*bintree{
			}},
			"vagrant_path.tpl": &bintree{dataSentinelsVagrant_pathTpl, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

