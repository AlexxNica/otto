// Code generated by go-bindata.
// sources:
// data/aws-vpc-public-private/build/template.json.tpl
// data/aws-vpc-public-private/deploy/main.tf.tpl
// data/aws-vpc-public-private/deploy/variables.tf
// data/common/dev/Vagrantfile.tpl
// data/common/dev-dep/Vagrantfile.fragment.tpl
// data/common/dev-dep/Vagrantfile.tpl
// data/common/dev-dep/build.sh.tpl
// data/common/dev-dep/upstart.conf.tpl
// DO NOT EDIT!

package goapp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAwsVpcPublicPrivateBuildTemplateJsonTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\xef\x6a\xc3\x20\x14\xc5\xbf\xe7\x29\x44\xe8\xb7\x36\x64\x6b\x19\x63\xaf\x32\x86\xbd\x31\x97\x4e\x1a\x35\xf8\xa7\xa3\x13\xdf\x7d\x26\x92\x4d\xc7\xd6\xe6\x4b\x82\xbf\x93\x73\xcf\x3d\x86\x86\xa4\x87\x4a\xa1\xd8\x04\xfc\x8c\x86\x5d\xd0\x58\xa1\x15\x7d\x21\xb4\x6b\x9f\xdb\x8e\x6e\x9b\xac\xb9\x80\x11\xd0\x8f\x68\x13\xca\xbf\x2d\xc7\xf0\x61\x19\x70\x8e\xd6\xb2\x33\x5e\x13\x53\x7e\x1c\xb7\x35\xb7\xc8\x0d\xba\xff\xb9\xc1\x53\x1e\x39\xb3\x05\xc5\x75\x6a\xef\xc5\x38\xa4\x48\x09\xbe\x16\x53\x15\x48\x9c\x23\x6a\xe7\x34\x2d\xdc\xdc\x75\x5a\xce\x41\xc2\xa7\x56\x3b\xec\x6d\x49\xab\x9c\x34\x6c\x48\x5a\xb6\x07\x27\x24\xd9\xc4\x10\x88\xb7\x68\xc8\xb1\x5e\xe8\x48\x62\x4c\x42\x54\x43\xa1\x2d\x3d\xab\xdd\x6e\x79\xfe\x08\xef\x7a\x7e\xf7\x71\xcb\x2f\x8b\xee\xe7\xd3\xde\x70\x64\x20\x45\xee\x45\xec\x1e\x1f\x9e\xf6\xdd\x70\x38\x94\x2a\xa1\xac\x03\x95\x74\x6b\x81\x7c\xdf\x8e\x60\x4e\x58\x59\xd9\x77\x36\xcf\x5f\xcb\xf7\xbd\x57\xce\x57\x05\x4b\xc1\x56\x1a\xc2\xfc\x15\x23\xf9\xbd\x43\x7a\x63\x9a\x26\xa7\xbf\x92\xe7\xdb\x7f\x6b\x62\xf3\x15\x00\x00\xff\xff\x25\x3b\xb6\x91\x9b\x02\x00\x00"

func dataAwsVpcPublicPrivateBuildTemplateJsonTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsVpcPublicPrivateBuildTemplateJsonTpl,
		"data/aws-vpc-public-private/build/template.json.tpl",
	)
}

func dataAwsVpcPublicPrivateBuildTemplateJsonTpl() (*asset, error) {
	bytes, err := dataAwsVpcPublicPrivateBuildTemplateJsonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-vpc-public-private/build/template.json.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsVpcPublicPrivateDeployMainTfTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\x41\x4e\xc3\x30\x10\x45\xf7\x3e\xc5\x97\xcb\x12\x71\x83\xee\x90\xd8\xc1\x11\xa2\x69\x3c\x54\x16\x89\x1d\xd9\x93\x22\x2b\xf2\xdd\x99\x86\xa4\x26\x62\x96\x6f\x9e\xfd\xff\x9c\xf0\xc6\x81\x13\x09\x3b\x5c\x0a\x3e\x44\xe2\x33\x5c\x44\x88\x02\x76\x5e\x30\x52\x98\x69\x18\x8a\x31\x53\x8a\x37\xef\x38\xc1\xd2\x77\xb6\x58\x0c\x74\xa8\xef\x39\xe7\xee\x8b\x0b\xce\xb0\x4f\xcb\x8d\xd2\x8b\xae\xbb\xc6\xab\x5d\xc5\xcc\x7d\x62\xf9\x2f\x36\xbe\x89\x89\xaf\x3e\x86\xa3\xf4\xcb\x54\xa8\xc6\x9c\xf0\xca\xd3\x10\x0b\x48\xff\x14\xc4\x4f\xf8\x90\x85\x82\xe6\x99\xc4\x39\xce\xa9\xe7\xb5\x62\xb7\x73\x0b\xbb\x2c\x08\x34\x32\x6a\x7d\x14\x1f\xfd\x9f\x8c\xd1\x6f\xe9\xfb\x9b\x4e\xca\xc4\x4d\x38\xe0\xfd\xa2\xf9\x12\xb4\xb9\x77\x4d\x7b\x20\x55\x56\x47\xe8\x9a\xb7\xc0\xfb\xbc\xdf\x3b\x9c\x0f\x75\xd6\x5d\xd5\xc3\x7e\x02\x00\x00\xff\xff\xa1\x87\x8b\xff\x8a\x01\x00\x00"

func dataAwsVpcPublicPrivateDeployMainTfTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsVpcPublicPrivateDeployMainTfTpl,
		"data/aws-vpc-public-private/deploy/main.tf.tpl",
	)
}

func dataAwsVpcPublicPrivateDeployMainTfTpl() (*asset, error) {
	bytes, err := dataAwsVpcPublicPrivateDeployMainTfTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-vpc-public-private/deploy/main.tf.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsVpcPublicPrivateDeployVariablesTf = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x91\x31\x4b\xc5\x30\x10\xc7\xf7\x7c\x8a\x23\x6f\xf6\x0d\xee\x0e\x0f\x5c\x3a\xb8\xd8\xc1\xb1\xa4\xe9\x55\x0f\xd3\x24\x5c\xae\x96\x22\x7e\x77\xd3\x50\x10\x0a\xd1\xa5\x1e\x9d\x7a\xbf\xfc\xee\xf8\xdf\xe5\xee\x84\x52\x17\xb8\x59\x8b\x29\x41\xe3\xc7\xa0\xce\x71\xaa\x0f\xc3\x64\x7a\x87\xa0\xcd\x92\x3a\x53\x06\x74\xef\xb8\x6a\xf8\x54\x90\x6b\xc0\x64\x99\xa2\x50\xf0\xf0\x00\x7a\xdf\x20\x03\x30\x06\x86\xdb\x4b\xab\xd5\xd7\xd1\x92\xd0\x32\xca\x2f\x96\xb6\x00\x7f\x58\x18\x5f\x33\x5e\x31\x3c\x97\x26\x2c\x6f\xc8\x08\x4b\xfe\xc8\x39\x08\x11\xd9\x08\x5e\x8b\xec\xac\xcc\x1f\x31\xba\xb0\xfe\x57\xe6\x13\xd5\x82\x7e\x6a\x40\x42\xfe\xbb\x4d\x3f\xa4\x43\x3e\x89\xf1\x16\x3b\x59\x23\x56\xde\x37\x3b\x03\x85\xd9\x89\xd1\xcc\x4e\xb6\xae\xdc\x5f\x27\xb2\x1c\x0e\xe2\x34\xf7\x3e\x1f\x8e\x86\xda\xdd\x4a\xff\x67\x2f\x20\x2f\xc5\xf1\x1d\x00\x00\xff\xff\xca\x58\x39\x4a\xe1\x02\x00\x00"

func dataAwsVpcPublicPrivateDeployVariablesTfBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsVpcPublicPrivateDeployVariablesTf,
		"data/aws-vpc-public-private/deploy/variables.tf",
	)
}

func dataAwsVpcPublicPrivateDeployVariablesTf() (*asset, error) {
	bytes, err := dataAwsVpcPublicPrivateDeployVariablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-vpc-public-private/deploy/variables.tf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x56\x69\x6f\xdc\x36\x13\xfe\xae\x5f\x31\x91\xed\xd8\x06\x56\x92\x13\x04\xf9\xb0\x89\x8d\x04\xce\x9b\xc4\xc0\x5b\x38\xad\xdd\x7c\x09\x82\x0d\x57\xa2\x24\xc2\x14\xc9\x92\xd4\x1e\xb1\xf7\xbf\x77\x86\xd4\x5e\xb9\xda\x02\x3e\xb8\x43\xce\x33\xd7\x33\x33\x7b\x00\xef\xb8\xe2\x96\x79\x5e\xc1\x74\x09\xd7\xde\xeb\x11\x54\x1a\x94\xf6\xc0\x2b\xe1\x1f\x25\x07\xc9\x01\xdc\xb6\xc2\x01\xfe\xf8\x96\xc3\x47\xd6\x58\xa6\x7c\x2d\x24\x87\xe6\x5b\x5d\xa8\xb5\x0d\xaf\x2a\x3e\xe3\x52\x9b\x8e\x2b\x0f\xba\x46\x08\x4f\x10\xcc\x18\x29\x4a\xe6\x85\x56\x85\xe3\x76\x26\x4a\x9e\xc3\x95\x07\xd7\xea\x5e\x56\xc1\xe8\x94\x43\xcb\x54\x95\x91\x71\x5e\xe5\x70\xab\xa1\xd3\x95\xa8\x97\x04\x8b\x38\x3b\xe6\x47\xd0\x3b\x1e\xac\xbd\x36\x86\x04\x79\x92\x0c\xd7\x79\xa9\x55\x2d\x9a\xde\xf2\x93\xf4\x69\x7a\x4a\x11\x3d\x44\xd1\x43\x02\x10\x4f\xf9\xac\xcb\xa7\x7a\x01\xe7\x90\xb6\xcc\xb5\xa2\xd4\xd6\x14\xc6\xf2\x52\x38\xfe\xfc\x59\x9a\xe0\xc3\x03\xb8\xe1\xbe\x37\xc0\xc0\x2d\x55\x89\x61\xd6\x5a\x56\xdc\x42\x6d\x75\x07\xba\xb7\x30\xd7\xf6\x4e\xa8\x06\x2a\x81\x7a\x5e\x5b\xf4\x52\x43\x31\x8b\x4e\xec\x59\x8a\x00\x93\x01\xe0\xf8\xfe\x1e\x0c\xf3\x6d\xbe\x06\x58\xad\x8e\x47\x90\xa2\xd4\xb5\xcc\x6e\xde\x4d\xe8\x0d\xde\xa5\x23\xc4\x02\xd0\x73\x4c\xf7\x18\xd2\x01\x3f\x1d\x41\x63\x75\x6f\x76\x24\xe4\xf4\xfd\x11\x88\x1a\x44\x67\xb4\xf5\x11\xe0\x11\x86\x98\xc2\xd1\x2a\x44\xf4\x46\x38\x36\x95\x7c\xa8\x52\xcd\x7a\xe9\xf7\xa3\xfb\x85\xdb\x69\x8e\x36\xd3\x62\x6b\xbf\x8a\x60\xd5\x18\xbc\xed\x79\x34\xce\x15\x96\x8b\xac\x05\x73\xff\x53\xc1\xda\xcd\xcd\x7b\x60\x0d\xb1\x01\x19\x32\x67\xb6\xa2\xa0\x9d\x46\x06\x79\x4f\x47\x63\xc5\x0c\x89\x84\x1e\x19\xd4\xe7\xaa\x14\xdc\x85\xec\xba\xad\x3b\xce\xb5\xf9\xa0\x3d\x89\x58\xe7\xd1\x6c\x30\xf4\x56\xf7\xaa\x0a\xd4\x82\x75\xf1\xe3\xa7\x13\xf4\x86\xa9\xe5\x69\xf4\x8e\x08\x8a\xd5\x02\xa1\xf0\xb8\xd6\x98\xa0\xc4\xe5\xc8\xd9\x98\x24\xba\xc7\x94\x15\x1a\x19\x5d\x6c\x5f\x65\x58\x1e\x54\x97\x5a\x9b\xfc\x12\xa5\x1e\x33\x82\xb5\xf9\x87\x32\x13\x58\xa8\x2e\x1e\xf6\x9e\x1a\xab\x67\xc2\x91\x87\xa9\x6b\xb9\x94\x98\x4e\xa1\xa4\x50\x1c\xeb\x59\x56\x70\x70\x8f\x0a\x2b\x78\xfc\x18\xa6\xc8\xce\xe1\x63\xd1\x31\xa1\x72\xd7\xa6\x9b\x54\x53\x3c\xeb\x5c\xff\x5f\xb3\x0a\x98\x94\x81\x9a\xb5\x65\x0d\xb5\x9f\x83\x96\x5b\x1e\xe2\xc6\x2c\xec\x25\x38\xdf\xa6\x64\xfd\x9a\xf2\x82\x79\x98\x6c\xb5\x43\x46\x28\xf2\x41\xf2\x60\x39\x5a\x59\xad\x7e\xe8\xc1\x95\x72\x9e\x1c\x78\xa7\x61\xda\x0b\x6c\x69\xae\x66\xc2\x6a\x45\x8a\xff\x36\xf8\x43\x57\x5a\x61\xfc\xa4\xd1\x92\xa9\x26\xe2\xfe\xc6\xee\x38\x08\x4f\x8c\xf1\x2d\xf3\xf0\x65\xa0\x20\x20\x27\xbe\x40\xa3\x91\x2c\xb1\x05\x65\xe8\x40\xe2\x36\xb6\x33\x09\xfe\x43\xda\x43\x8f\x1d\xfd\xfe\x89\x97\xad\x0e\x25\xf8\x69\x3b\xc2\xc5\x05\x14\xad\xee\xf8\xba\x15\x8a\x9c\x8a\x64\xcb\xcf\xd1\xdd\xcd\xbc\xd4\x81\xc3\xc0\x2c\x91\x08\xbd\xef\x38\xe6\xa5\x71\x60\x45\xd3\x7a\x9c\x77\x73\x7c\xfe\x29\x9d\x75\xc8\x69\x3e\xa9\x7b\x72\x8b\x3a\x6c\x10\x04\xfe\xfb\xc0\xbd\xf4\x73\xce\x59\xd9\x86\x41\xa6\x58\xc7\x1f\x82\xb3\xdf\x44\x85\x2e\x9e\xd0\x65\x9c\x77\x26\xbe\x01\x30\x39\x0f\x4d\x38\x99\x75\xb6\x57\x13\x61\x26\x48\xe1\x3b\x1c\x6b\xe7\x50\x33\xe9\x78\x78\x86\x85\x4c\xe2\xdf\xef\xb3\x45\x54\x1e\x1b\x66\xb1\xb2\x5c\xba\x08\x3e\x02\x1d\xf1\xf5\xce\x1c\xdd\xbc\x29\xfa\x29\xf6\x47\x9f\x3d\x79\x9a\x9f\x3d\x4b\x07\xe0\x00\xbe\x5f\x5d\x54\x7a\xf9\xf2\xe6\xf2\x8f\xab\x0f\xb7\x89\xe3\x1e\x32\x6c\x66\xcd\x4f\x4e\xe1\x1e\x0e\x5f\xc1\xd3\x8b\xc7\x4f\xe0\x01\xa4\x6e\x1a\xf4\x20\xc3\x4d\x42\x2b\x06\x53\x8f\x0c\x2d\x54\x2f\xe5\x0b\x58\x25\x5a\x86\xe7\xb1\x68\x9f\xe8\xc5\x67\xd4\x4d\xe9\x0a\xd7\xc5\x55\x0d\x73\xda\x28\x33\x8e\x9c\x1c\x11\x31\xd4\xb0\xde\x5a\x1c\x3b\x09\x8e\x86\x52\x77\x1d\x2e\x1c\xc8\x66\xc8\x23\xb8\xd8\x60\x07\xeb\x2f\x82\x46\x8c\x53\x42\x8a\xb4\x66\x92\xf8\xbf\x44\xce\x04\xa6\xf3\xea\x51\x5c\x7c\x73\xad\x8e\xfd\x5a\x8a\xb6\xf2\x34\xa6\x75\x81\xac\x3d\x4b\x6a\x81\x71\x21\xc0\x1b\x1c\xe1\x12\xbb\x94\x46\x1e\x82\xd1\x78\xc0\x66\x6b\xf4\x64\xc6\x6d\xe0\xe4\x6a\x95\xe7\xa8\xaa\x39\xcc\x1b\xca\xc7\x5f\x90\x5d\x7f\x43\xb5\x46\xe7\x9e\xd9\xbc\xf9\x0a\xad\xf7\xc6\x8d\x8b\xc2\xe1\xe6\xc1\x81\x98\x37\x5a\x37\x92\x33\x23\x1c\xee\xbf\xae\x88\x29\xc6\x7f\x3f\x34\x83\x94\xef\x17\x19\xeb\xaa\xe7\xcf\x06\xbc\xe8\xe2\x9f\x0a\x3f\xd9\xe8\xe0\xda\x17\xd7\x63\xce\x50\x0c\xd9\x25\x14\xbd\xb3\x85\xd4\x25\x93\x90\x2d\xbe\xd6\x3f\x73\x2e\x82\x61\xdf\x06\xa4\xeb\x0f\xaf\x6f\xdf\xef\xa1\x75\x77\x34\x18\x33\x03\x85\x36\xa4\x46\xad\x95\xd4\xce\x2f\x0d\x3f\x3f\x3c\xa9\x05\x56\x64\xe7\x06\xb2\x0e\x25\xdc\xe0\xe9\x0c\xcf\x6c\xb1\x39\x93\x02\x60\xf5\x70\x81\xe0\xb7\x02\x48\x8f\xde\xa6\xa7\xc9\xf7\xea\x11\x19\x0e\xef\xe3\x61\x35\x28\x9c\x21\xbd\x16\xcc\x62\x47\x66\x88\xa5\xe0\xc9\xd9\x19\x20\x91\xe6\x0a\x86\x80\xc6\xeb\x5d\x1e\xc2\xb9\x19\xb6\x15\xf6\xce\x26\xa0\x40\xbc\x63\xbe\xa0\x75\x1b\xa4\xe7\x3b\x86\x8b\xa9\x50\xe3\x6d\xc6\x50\x1a\x24\x87\xf4\xee\xf8\xa7\x53\x64\x1f\x33\x26\x6f\x17\xf5\x17\x9a\xc1\xcd\x61\x0a\x93\xa7\x1f\x2f\x6f\x5c\x18\xf0\x4d\xd8\xb5\x7b\x25\x60\xc6\x67\x44\xb2\xde\x54\xb4\x7a\xb3\xe5\x77\x37\x6b\x3a\x67\x4b\x68\x90\xc7\xd3\xaf\x16\x3a\x6e\xcb\xde\x0a\x26\xa3\xa9\xcb\x61\xd5\x0e\x84\xc6\x46\xa0\xef\x64\xb4\xed\x49\x97\x36\x85\xae\xe1\xfd\xed\xed\x87\x60\x99\x40\xe2\x6c\x81\x2c\x6b\xa4\x9e\x22\x89\x7a\x2b\xf3\x14\x2f\x5e\xe1\x6f\xdb\x4f\x89\xb9\xe3\x34\x1f\xb4\xaf\xb1\xa2\x6b\x96\x6f\xef\x8b\x34\x19\x66\xc6\xdf\x01\x00\x00\xff\xff\xf4\x7f\x49\xd9\xbf\x0a\x00\x00"

func dataCommonDevVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevVagrantfileTpl,
		"data/common/dev/Vagrantfile.tpl",
	)
}

func dataCommonDevVagrantfileTpl() (*asset, error) {
	bytes, err := dataCommonDevVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevDepVagrantfileFragmentTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x93\x31\x8f\xdb\x30\x0c\x85\x77\xff\x0a\xd6\xe9\xdd\x74\x67\xef\x87\xbb\x29\x40\x3b\xb6\x40\xbb\x74\x32\x1c\x89\x89\x85\x5a\xa2\x20\xd1\x0e\x8c\x20\xff\xbd\xa4\x1d\x24\x2e\xda\x06\xbd\xcd\x92\x9e\x3e\xbd\x47\xd2\x1b\xf8\x8c\x01\x53\xcb\x68\x61\x37\x81\xc5\x88\xc1\x62\x30\x13\xec\x29\xc9\x72\xc4\x9e\xa2\xc7\xc0\x2f\x70\x3a\x41\x68\x3d\xc2\xf9\x5c\x14\x1f\x6f\x8b\x26\x23\x0f\x11\xde\xe0\xf5\x75\xfb\xe5\xeb\x8f\x62\x03\x5b\x8a\x13\xd0\x90\x60\xe7\x42\x9b\xa6\x22\x0f\x96\xc0\x8f\x50\xb3\x8f\xb5\xbc\xf0\x7c\xbb\xac\x50\xd9\x69\x16\x65\x13\x5b\xee\x66\xfe\x05\xc2\x1d\xc2\x10\x33\xb7\x89\x61\xef\x7a\xbc\x87\xaa\x2e\xc2\xca\x50\xd8\x43\x8d\x6c\x6a\x17\x1c\xd7\x2b\x85\x9e\x28\xfb\xdb\x0c\x74\xfc\x61\xe1\x2d\xfc\x55\xbc\x39\x87\xea\xa6\x60\xe6\x20\x74\x0c\x6a\x53\x6a\xd2\x5b\x4c\xe0\x82\x3a\x4b\x58\x28\xd0\x1d\xaa\xd1\x57\x59\xa4\x68\x9b\x8b\xa0\x14\x98\x66\xa9\x8e\x94\x7e\xba\x70\x10\x68\xf9\x74\xdb\x3d\x0c\x98\xb9\x59\x9d\x5d\x03\x6b\xc8\x2c\x7c\x26\x68\x81\xd1\x47\xb0\x2e\xa1\x61\x4a\x53\x05\xdf\xa5\x1a\xd9\x24\x17\x19\x8e\xae\xef\xc1\xd3\x88\x6a\xc4\x57\x2b\x23\x31\xd1\xe8\xb2\xa3\x00\xa5\xc2\xca\xa7\x02\x20\x4b\x06\x83\x2f\x37\x03\xa6\x35\x9d\x26\x95\x12\x8e\xcf\x5a\x46\x1a\x38\x0e\x3c\x8b\xad\x78\x93\x6e\xb0\x20\xe4\xc6\x5f\x0a\x2d\x6e\xdf\xfb\x1c\xf9\x28\x87\x76\xf5\x62\xbd\xee\xd6\xff\xbd\xfb\x5b\x83\xff\x65\x22\x77\xd8\xf7\x33\xcf\x85\xde\x05\x71\xf1\xc7\xa8\x6a\xb1\x3f\xd1\x10\xec\xfc\x16\x2c\x98\x21\x2d\xab\xcb\xd4\x6b\xb7\x8b\xd3\xc3\xb2\x74\x73\xc7\xf7\xd7\x2b\x8d\xec\xe4\x4a\x54\x8d\xce\xc4\xc3\xb9\x50\xc5\x9b\x78\x26\x66\xaa\x6f\xba\x95\x77\xfd\x14\x56\x4f\x14\xab\xad\x08\x58\x86\x44\x2b\x79\x6f\x80\x94\x3a\xcf\x8d\x7c\xdc\x0d\x7b\x8d\x5a\x1a\x0b\x9b\x93\xc8\xcf\xf0\xf8\x08\xbb\x36\x77\x97\x65\xed\x5b\x17\xaa\xdc\x95\x9a\x49\x7e\x70\x8d\x25\xbe\x7f\x05\x00\x00\xff\xff\xb6\x2e\xa8\x1d\xfd\x03\x00\x00"

func dataCommonDevDepVagrantfileFragmentTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevDepVagrantfileFragmentTpl,
		"data/common/dev-dep/Vagrantfile.fragment.tpl",
	)
}

func dataCommonDevDepVagrantfileFragmentTpl() (*asset, error) {
	bytes, err := dataCommonDevDepVagrantfileFragmentTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev-dep/Vagrantfile.fragment.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevDepVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x5b\x4f\xe3\x38\x14\x7e\xcf\xaf\x38\x18\xd8\x82\xd4\x24\x05\x8d\xe6\xa1\x33\xa0\x19\xc1\x0e\xf0\xb0\x02\x6d\xbb\xb3\x0f\xab\x15\x72\x13\x27\xf1\x8e\x63\x7b\x6d\xa7\x17\xa0\xff\x7d\x8f\xed\xb4\xd0\x61\xe7\x22\x51\xe1\xd8\x3e\xdf\x77\x2e\xdf\x39\xde\x87\x2b\x26\x99\xa1\x8e\x95\x30\x5b\xc1\xad\x73\x6a\x08\xa5\x02\xa9\x1c\xb0\x92\xbb\xbd\x64\x3f\xd9\x87\x69\xc3\x2d\xe0\x9f\x6b\x18\x7c\xa6\xb5\xa1\xd2\x55\x5c\x30\xa8\xbf\xb6\x85\x4a\x19\x98\x75\x5c\x94\x5c\xd6\xfe\x3a\x1a\xcf\xb8\xa4\x66\x85\x1f\xd4\x79\x8c\xce\xe2\x75\x6a\x81\x42\xc9\x34\x93\x25\x93\xc5\x2a\x98\x95\x6c\xce\x84\xd2\x2d\x93\x2e\x0b\xac\x97\xd1\x8d\x86\xca\x32\xf5\xbe\x20\x04\xda\x7b\xe2\x0c\xa6\x0a\x5a\x55\xf2\x6a\x15\x36\x87\x1e\x35\x78\xf7\x51\xeb\x70\x21\x49\x7a\x3f\xb3\x42\xc9\x8a\xd7\x9d\x61\x47\xe4\x94\x1c\xfb\xd8\x9e\xe2\xd6\x53\x02\x10\x57\xd9\xbc\xcd\x66\x6a\x09\x67\x40\x1a\x6a\x1b\x5e\x28\xa3\x73\x6d\x58\xc1\x2d\x7b\xfb\x86\x24\x78\x71\x1f\x26\xcc\x75\x1a\xbd\xb6\x2b\x59\x60\x04\x95\x12\x25\x33\x50\x19\xd5\x82\xea\x0c\x2c\x94\xf9\xe2\x63\x2e\x39\xda\x39\xe5\x03\x56\x90\xcf\xa3\x13\x3b\x4c\x11\xe0\xbe\x07\x18\x3c\x3e\x82\xa6\xae\xc9\x36\x00\xeb\xf5\x60\x08\x04\x77\x6d\x43\xcd\xf6\xde\xbd\xbf\x83\x67\x64\x88\x58\x00\x6a\x81\x89\x1f\x03\xe9\xf1\xc9\x10\x6a\xa3\x3a\xfd\x62\xc7\x3b\xfd\x78\x08\xbc\x02\xde\x6a\x65\x5c\x04\xd8\xc3\x10\x09\x1c\xae\x43\x44\x97\xdc\xd2\x99\x88\x79\x2b\x59\x45\x3b\xe1\x76\xa3\xfb\x8e\xdb\x24\x43\x4e\x92\x3f\xf3\x97\x11\xac\x1c\x83\x33\x1d\x8b\xe4\x58\x5d\xe4\x47\xb6\x40\xf7\xab\x0c\x6c\x93\xc9\x35\x50\x14\x8e\xf3\x45\x5f\x50\x13\x94\x62\x15\x6a\xc9\x39\xbf\xd4\x86\xcf\x51\x52\xcf\xea\xe0\xcc\x86\xec\xda\x67\x77\xac\x6d\xb2\xde\xfa\x3e\x62\x9d\x45\xda\x1f\x55\x6a\xd1\x30\xc3\x42\xbd\x0a\xd5\x6a\x14\x4a\x09\x25\x75\x34\x68\x5b\x05\xe3\x5c\xa1\x8c\x33\xf8\x93\x79\xa5\x04\xc1\x61\x1d\x69\x51\x30\x1b\xe5\x1f\xc4\x0d\xb6\x30\x5c\xa3\x4c\xbf\x9d\xa0\x4f\x5e\x85\xff\x28\x2e\x8f\xb6\x15\xde\x52\x86\x12\x0f\x50\xef\x29\x06\x39\x38\xf6\x89\xf4\xac\x3f\x16\x5a\x74\xdf\xbb\x51\xd0\xc2\x57\x8d\x1b\x74\xfd\x67\xd4\x15\xef\x47\x6d\x05\xb2\x34\xec\xf4\x94\x37\xd2\x3a\x2a\x04\x5c\xa9\x3e\x3e\x26\xe7\xdc\x28\xe9\x7b\x71\x07\x5d\x1b\x35\xe7\x96\x2b\x09\xc4\x36\x4c\x08\x2c\x3c\x97\x82\x4b\x36\x86\x83\x98\x93\xfb\x5a\x09\x2a\xeb\xe4\xb5\x99\xf7\x67\xac\xa9\x41\x22\x26\x6c\x68\x44\x3d\x04\xf5\x14\x05\xfd\xa2\x07\xb7\x77\xf2\x6e\xd6\x49\xd7\xa5\x27\xa7\xd9\x08\xdb\x10\xbc\xa0\x12\xff\x4b\x76\xc9\xd0\xe8\xfd\xfb\xc9\xc5\xef\x37\x77\xd3\xc4\x32\x07\x29\x0a\x41\xb1\xa3\x63\x78\x84\x83\x0f\x70\x7a\xfe\xcb\x09\x3c\x81\x50\x75\x8d\x1e\xa4\x0e\x7c\xf8\x70\x0e\x39\x16\x20\x97\x9d\x10\xef\x60\x9d\x28\x11\xae\xb3\xa2\x51\x40\xfe\xf2\x37\xfe\x46\x5b\xe2\x8f\x70\x12\xdd\x54\xb0\x60\x38\x88\xe6\x0c\x53\x34\xf4\x05\x90\xfd\x90\x6c\x50\xb2\x09\x8a\x1c\x6b\xdb\xe2\x9c\x82\x74\x0e\x35\x82\x6f\xb1\x03\xfb\xbb\x60\x11\xe3\x14\x40\x30\xcb\x54\x18\x46\xcb\x15\x26\x2f\x24\x9e\x95\x7b\x71\x7c\x2e\x94\x1c\xb8\xcd\x2e\x72\x65\x24\x58\xb1\x25\x4e\xbf\x51\x52\x71\x8c\x0b\x01\x2e\xb1\xfd\x85\xa2\xa1\x73\x10\x0c\x6b\x8c\x74\x98\x8b\xfb\x39\x33\xa1\x38\xeb\x75\x96\xa1\xa9\x62\xb0\xa8\x7d\x3e\xfe\x85\xf4\x16\xf2\x46\xb5\x6c\xd3\xb1\x79\xad\x32\x47\x4d\x56\x3f\x40\xe3\x9c\xb6\xe3\x3c\xb7\x38\xb5\xb0\x99\xb2\x5a\xa9\x5a\x30\xaa\xb9\xf5\x8a\xcd\x63\x8a\xf1\xdf\xff\xd2\x60\xed\xbb\x65\x4a\xdb\xf2\xed\x9b\x1e\x2f\xba\xf8\x87\xc4\x2f\x13\x1d\xdc\xf8\x62\x3b\xdf\x52\x14\x6b\x70\x01\x79\x67\x4d\x2e\x54\x41\x05\xa4\xcb\x87\xea\x5b\xce\x45\xb0\xdf\x68\x98\x8c\x57\xb7\x77\x1f\xa7\xd7\x3b\x68\xed\x17\xdf\x02\xa9\xc6\xb6\xd5\xde\xcc\x6b\x3d\xa9\xac\x5b\x69\x76\x76\x70\x54\x71\xac\xc8\x8b\x13\x48\x5b\xdc\x61\x1a\x57\x23\x5c\xd3\xe5\x76\xed\x0d\x00\xab\x87\xc3\x07\x9f\x36\x20\x87\x9f\xc8\x71\xf2\xda\x3c\x22\xc3\xc1\x63\x5c\xac\x7b\x83\x11\xca\x6b\x49\x4d\x6d\x21\x45\x2c\x09\x27\xa3\x11\xa0\x90\x16\x12\xfa\x80\xc6\x9b\x77\x20\x84\x33\xe9\x27\x1d\x76\xf9\x36\xa0\x20\xbc\x01\x5b\xfa\x51\x1d\x76\xcf\x5e\x10\xe7\xf8\x84\x8e\x9f\x33\x86\xbb\x61\xe7\xc0\xdf\x1b\xc0\xf9\xf9\x57\xd9\xcb\x66\xf8\x88\x99\x62\x17\x33\x26\xef\x25\xea\x77\x2c\x83\x9b\xfd\x50\xf0\x9e\x7e\xbe\x98\xd8\xf0\x46\xd7\x61\x4e\xef\x94\x80\x6a\x97\x7a\x91\x75\xba\xf4\x63\x3b\x5d\xbd\x3a\xd9\xc8\x39\x5d\x41\x8d\x3a\x9e\x3d\x18\x68\x99\x29\x3a\xc3\xa9\x88\x54\x17\xfd\x1b\xdd\x0b\x1a\x1b\xc1\xbf\xe7\xfe\xa5\xf0\xb6\xd8\x29\xa0\x2a\xb8\x9e\x4e\xef\x02\xb3\x07\x89\xb3\x05\xd2\xb4\x16\x6a\x86\x22\xea\x8c\xc8\x08\x1e\x7c\xc0\x5f\xd3\xcd\xbc\x72\xc7\x24\xeb\xad\x6f\xb1\xa2\x1b\x95\x3f\x9f\xe7\x24\xe9\x67\xc6\x7f\x01\x00\x00\xff\xff\x47\x08\xce\xb7\x05\x09\x00\x00"

func dataCommonDevDepVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevDepVagrantfileTpl,
		"data/common/dev-dep/Vagrantfile.tpl",
	)
}

func dataCommonDevDepVagrantfileTpl() (*asset, error) {
	bytes, err := dataCommonDevDepVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev-dep/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevDepBuildShTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x92\x41\x8f\xd3\x30\x10\x85\xef\xfe\x15\x8f\x14\x69\xe1\x90\x44\x9c\x11\x08\xb8\xf4\x08\xd2\xc2\x09\xa1\x95\x6b\x4f\x12\xb3\xae\x27\x72\x26\xed\x56\xd5\xfe\x77\xc6\xce\xa2\xad\x14\xe5\xe0\xb1\xdf\xfb\xe6\xcd\xec\xde\xf4\x87\x90\xfa\x83\x5d\x26\xb3\x33\x3b\x7c\x5d\x85\xdb\x91\x12\x65\x2b\xe4\x71\xb8\xe0\xbb\x08\x77\xb5\xf6\x73\x0a\x0b\xf4\x93\x89\x70\x58\x43\xf4\x58\x5c\x0e\xb3\x60\xe0\x0c\x8b\x3d\xb7\x2a\xa3\x8f\xe6\xcc\x7f\xc9\x49\x67\x16\x12\xb4\x64\x0c\xc7\x77\xef\x71\x05\xb9\x89\xd1\xfc\x66\x15\xfc\x83\xb7\x5f\x9a\x8f\x78\x36\x2a\x7b\xaf\xb7\xa4\x48\x0b\x63\xb0\x8f\xb4\xe9\x2b\x50\x76\xe0\x84\x85\x8f\x84\x39\x5a\x51\x97\x63\x31\xb7\x82\x33\xdd\x65\x42\x48\xa2\x98\x4e\xc2\x89\x14\x10\xbf\x0e\x6b\x92\x55\x4f\x31\xdb\x2c\xc1\xad\xd1\xe6\xd2\x80\xa7\xc1\xae\x51\x1f\x71\xba\x13\x44\xb6\xfe\xd6\x21\x0c\x9b\x79\x58\xb4\xaa\x2a\xca\xdc\x19\x7a\x9a\x39\x0b\x7e\xdc\x7f\xf8\xd4\x7c\x46\x53\x29\x79\xcd\x8e\xa0\xff\xd2\xdf\x10\x22\x29\x99\x82\x60\x54\xfc\x7a\x6a\x65\x2a\xa5\x99\x72\xbc\x14\x99\x75\x36\x1d\xfa\x49\xf1\xfb\x93\x1d\xb3\x4d\xd2\x77\x9b\x69\xd1\xdb\x73\xe1\xe7\xfa\xf4\xcc\xf9\x31\xa4\x11\x3e\x64\xcd\x8d\xf3\xc5\x38\x8f\xeb\x15\xcb\x64\x33\xf9\x87\x81\xa3\xa7\xfc\x50\x0d\x9e\x6b\x64\x7b\xf5\xb4\x31\xd6\x3e\x3c\xcd\x94\x3c\x25\x17\x68\xd1\xa4\xd1\x68\x51\xaa\xda\x4d\xa1\xeb\xba\xc6\x8c\x5c\x61\xdb\x13\xba\x5e\x0f\x8a\xd0\xb7\x3a\xc6\x22\xf3\x32\x34\xd8\xe4\x71\xce\x41\xb6\x31\xf0\x2a\xf3\x2a\xaf\xa4\x1b\xd1\x0d\xe8\x0e\xe7\xa0\x58\xe5\xae\xe3\xe3\xac\xb1\xdc\x54\x4b\x42\x2f\xf3\x82\xb3\x09\x64\x97\xa0\xd9\xd0\x93\x94\xb1\x21\x68\xd2\x05\xb8\x42\x28\xf1\x7f\xc8\x6d\xb7\x5a\xdd\x95\xbe\xec\x4a\xeb\xac\x9b\xa8\xf7\x74\x6a\xb5\xa5\x76\x43\x6a\xcc\xbf\x00\x00\x00\xff\xff\x93\x14\x33\xb5\xba\x02\x00\x00"

func dataCommonDevDepBuildShTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevDepBuildShTpl,
		"data/common/dev-dep/build.sh.tpl",
	)
}

func dataCommonDevDepBuildShTpl() (*asset, error) {
	bytes, err := dataCommonDevDepBuildShTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev-dep/build.sh.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevDepUpstartConfTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8f\x41\x4b\x03\x41\x0c\x85\xef\xf9\x15\x8f\x0a\x7a\xaa\x6b\xab\xeb\x71\xaf\x1e\x3d\x7a\x90\x52\xc6\x9d\x54\x16\x66\x93\x61\x26\xb6\x4a\xd9\xff\x6e\x1c\x14\xe9\x29\x24\x79\x7c\xef\xbd\xc8\x75\x2c\x53\xb6\x49\x05\xab\xf3\x19\x12\x66\xc6\xb2\x60\x8d\x27\x16\x2e\xc1\x38\xe2\xed\x0b\xcf\x66\xba\x22\x2a\x5c\x73\x38\xc9\xdf\x44\x9a\xe6\xc9\xb0\xe9\xd1\x13\x55\x0b\xc5\xe0\x98\xf2\x21\x89\x8f\x9c\xf0\xba\xbd\x7f\xe8\x77\xfe\xd0\x7c\x79\xbf\x7b\xdc\x11\x5d\xe1\x85\x11\x55\x6e\x0c\xa7\x20\x06\x53\x38\xb6\x41\x4c\x15\x87\x50\x0d\x07\x2d\x88\x9c\x2b\x65\xad\xb6\x6e\x20\xfe\xe4\x11\x35\x31\xe7\x66\xda\xc2\x13\xe0\xd1\x5d\xb8\x77\x8f\xfd\xa8\xf3\x1c\x24\xfe\xb4\x18\x86\xee\x18\x4a\x97\xf4\xbd\xfb\xef\x76\xeb\x2b\xb6\xc3\xf5\x86\xd8\x55\xbf\x84\xef\x00\x00\x00\xff\xff\xb4\x52\xf1\xf2\x08\x01\x00\x00"

func dataCommonDevDepUpstartConfTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevDepUpstartConfTpl,
		"data/common/dev-dep/upstart.conf.tpl",
	)
}

func dataCommonDevDepUpstartConfTpl() (*asset, error) {
	bytes, err := dataCommonDevDepUpstartConfTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev-dep/upstart.conf.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/aws-vpc-public-private/build/template.json.tpl": dataAwsVpcPublicPrivateBuildTemplateJsonTpl,
	"data/aws-vpc-public-private/deploy/main.tf.tpl": dataAwsVpcPublicPrivateDeployMainTfTpl,
	"data/aws-vpc-public-private/deploy/variables.tf": dataAwsVpcPublicPrivateDeployVariablesTf,
	"data/common/dev/Vagrantfile.tpl": dataCommonDevVagrantfileTpl,
	"data/common/dev-dep/Vagrantfile.fragment.tpl": dataCommonDevDepVagrantfileFragmentTpl,
	"data/common/dev-dep/Vagrantfile.tpl": dataCommonDevDepVagrantfileTpl,
	"data/common/dev-dep/build.sh.tpl": dataCommonDevDepBuildShTpl,
	"data/common/dev-dep/upstart.conf.tpl": dataCommonDevDepUpstartConfTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"aws-vpc-public-private": &bintree{nil, map[string]*bintree{
			"build": &bintree{nil, map[string]*bintree{
				"template.json.tpl": &bintree{dataAwsVpcPublicPrivateBuildTemplateJsonTpl, map[string]*bintree{
				}},
			}},
			"deploy": &bintree{nil, map[string]*bintree{
				"main.tf.tpl": &bintree{dataAwsVpcPublicPrivateDeployMainTfTpl, map[string]*bintree{
				}},
				"variables.tf": &bintree{dataAwsVpcPublicPrivateDeployVariablesTf, map[string]*bintree{
				}},
			}},
		}},
		"common": &bintree{nil, map[string]*bintree{
			"dev": &bintree{nil, map[string]*bintree{
				"Vagrantfile.tpl": &bintree{dataCommonDevVagrantfileTpl, map[string]*bintree{
				}},
			}},
			"dev-dep": &bintree{nil, map[string]*bintree{
				"Vagrantfile.fragment.tpl": &bintree{dataCommonDevDepVagrantfileFragmentTpl, map[string]*bintree{
				}},
				"Vagrantfile.tpl": &bintree{dataCommonDevDepVagrantfileTpl, map[string]*bintree{
				}},
				"build.sh.tpl": &bintree{dataCommonDevDepBuildShTpl, map[string]*bintree{
				}},
				"upstart.conf.tpl": &bintree{dataCommonDevDepUpstartConfTpl, map[string]*bintree{
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

