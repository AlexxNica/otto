// Code generated by go-bindata.
// sources:
// data/aws-simple/build/build-node.sh.tpl
// data/aws-simple/build/template.json.tpl
// data/aws-simple/deploy/main.tf.tpl
// data/common/dev/Vagrantfile.tpl
// DO NOT EDIT!

package nodeapp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAwsSimpleBuildBuildNodeShTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\x71\x6f\x13\x3f\x12\xfd\x7f\x3f\xc5\x90\x56\xf4\x4e\xaa\x77\xdb\x0a\x38\x68\x01\x5d\x5b\x5a\xa8\x84\x52\x54\x40\x77\x12\x70\xd5\x66\x77\x92\xf8\xba\xb1\x17\xdb\x9b\x26\x2d\xf9\xee\xbf\x37\xde\x74\xd3\xa8\x80\x90\x7e\xff\xb4\x1b\xdb\x33\x7e\x33\xf3\xe6\x8d\x37\x1e\x65\x03\x6d\xb2\x41\xee\xc7\x49\xe2\x39\x90\xb2\x64\x6c\x63\x96\x9f\xec\x1c\xcf\x74\xfc\xac\x75\xcd\xc3\x5c\x57\xcb\xe5\xe0\xf2\x82\x93\x04\x5f\xd6\xfd\xe3\x9f\x74\x9b\x10\x51\x65\x8b\xbc\x22\x6f\x1b\x57\xf0\x50\x57\xfc\x6a\x73\x77\xb5\x5c\x69\xc3\xc6\xbe\xda\xdc\x93\x25\x2e\xc6\x96\x7a\x27\x17\x17\xe7\x17\x94\x07\xda\xbc\x5d\x19\x2d\xf6\x37\x6f\xdb\xb3\x8b\x03\x7a\x9f\xfb\x00\xfb\x91\xdf\xef\x89\xd9\xc8\x71\x4d\x36\x04\x4b\xd9\x34\x77\x19\x36\x32\x3f\xf7\xf8\x47\x3f\x28\x44\x6c\x86\xf6\x76\x92\x45\x02\x74\x35\x6d\x45\x70\xd4\xdb\xbc\x3d\x3a\xfc\xf8\xee\xf2\xe3\xf9\xe7\x8b\xe3\x93\x45\x4f\x16\xde\x9f\xf5\x4f\xfa\xe7\x8b\xde\x16\x01\x43\x92\x58\x96\x10\xb0\xf1\xef\x1e\xed\xbd\x7e\xbc\x0b\x77\x70\x3a\x62\x47\x2a\xb4\xf7\xbd\xa6\xac\xe4\x69\x66\x9a\xaa\x3a\xa0\x45\x62\xab\x68\xd0\x86\xf1\x45\x4e\x7c\x23\x18\xcb\x56\xb2\x41\x45\x65\x9b\x52\x15\xd6\x0c\xf5\x88\x8a\xdc\x90\x36\x81\xdd\x90\x1d\xd3\xb5\x0e\x63\xca\xeb\x40\x85\x9d\x4c\x72\x53\x7a\xd2\x43\xd2\x61\xcb\x93\x0f\xba\xaa\x70\x92\x6a\x67\x11\xa7\xf7\xb8\x84\x7a\xff\xc9\x75\xd0\x66\x44\x43\x04\xb2\xe6\x16\x98\xe0\xa2\xae\x38\x70\x9a\xa6\xbd\xa4\x31\xb0\xa7\x2f\x5f\x48\x0d\x97\xc9\xd1\x83\x2c\x5a\x64\xda\xf8\x90\x9b\x82\xb3\x81\xb5\x41\x0d\xb5\xd1\x7e\xcc\x25\x7d\xfb\x76\x40\xa5\x45\x5a\x7d\xc5\x48\xeb\x4e\xfa\x34\x29\xad\x41\x4d\xe5\xde\xc3\xb2\x94\x6b\x05\x29\x72\x6e\xbd\x0e\xd6\x69\xf6\x04\xc8\xd4\xd4\x65\x2e\xa0\xe2\xbd\x96\xc9\x37\xa5\x95\x93\x6a\x04\xd2\xc4\x4d\x26\x35\x7f\xb0\x13\x61\x20\x44\x35\x07\x45\x86\xe1\x3a\x77\xac\x10\x6b\xcd\x2e\xc0\xb3\x92\x84\x58\xb3\x66\x75\xc5\x73\xca\xcb\x29\x29\xf9\xf2\xec\xa6\x28\xc8\xf8\xaa\xde\xcf\xb2\xee\x77\xda\x0c\x10\x79\x93\xc2\x7a\xff\xf9\x0e\x4e\x3a\x2e\xa6\xf1\x38\x3d\x7d\xb6\x7b\xfa\xe2\xe8\xc5\xf1\xe1\xf1\x93\x9d\xa3\xbd\xd3\x7f\x25\xb1\x5a\x5b\x25\x0f\x68\x1c\x42\xed\xe1\xc6\x7a\xaf\x40\xff\x5c\x42\x4b\xeb\x71\xe3\xb5\x35\x75\xee\x3d\x1b\xd4\x5e\x7c\x66\x80\x91\x75\x2b\x14\x5c\xe3\xc3\x9c\x26\xb9\x36\x5b\xe0\x48\x04\x1a\x98\x29\xe3\x50\xc4\xa3\x2d\x8d\x7d\x5a\x69\x1f\xd2\x72\x65\x19\x17\xee\x93\xe8\x17\x79\x6b\x93\xff\xc6\x5e\x9b\xca\xe6\xb1\x02\x7d\x5b\x32\xdd\xde\xa2\x29\x4b\xbe\x44\xc0\x02\x91\x16\x8b\xbb\xdc\x5f\x8b\xad\xfa\x4e\xea\x9c\xb2\xb1\x9d\x30\x4a\x3f\x72\xb9\x09\x99\x9c\x4f\x43\xee\xd2\xd1\x4d\x17\xae\xac\xfd\xdf\xa7\xd6\x8d\xb2\x12\x78\xb2\xe9\x43\xbf\xf1\x8c\xfa\xc9\x86\x42\x4f\x36\x33\x35\x7b\xf6\x64\xe9\xb5\x85\xfa\xd9\xe0\x97\xbb\x03\xba\xc6\x08\x6c\x90\x3a\xa6\xcc\x82\x43\x6a\x76\x33\xfc\x35\xc0\xd6\xd5\x47\x0e\x91\xea\x4d\x4d\x1f\x0e\x3f\xbd\x5b\xf3\x55\x19\x52\x3e\xba\xfa\x03\x80\x51\xd1\x64\x97\xb2\xc6\x8b\x4a\x40\x7e\xba\xb5\xbf\xe3\xb2\x9e\x3c\xf0\x58\x4f\x5a\xf0\x67\x2d\xb9\x05\xff\x87\xbb\xa2\x6f\x53\x7f\xa4\xcd\x6c\x3b\x36\x8d\x0d\x63\x10\xc8\x37\x75\x6d\x5d\x0c\xb3\xce\x8b\xab\x7c\x04\xae\x48\x9c\x3c\x93\x65\x7a\x73\x72\x74\x76\xd8\xbf\x3c\xbd\x38\xef\x7f\x3a\xe9\xbf\x79\x65\xac\x89\xd2\x91\x17\x41\x4f\xf9\x77\x1d\x35\xb8\x71\x34\x82\x50\x4f\xd8\x15\x8d\xd3\xd0\xdb\x41\xa3\xab\x52\xb1\x60\x09\xf2\xfb\x2b\x3a\x1d\x9a\x50\x7f\x57\xe0\x20\xdd\xe0\x73\x77\x14\x3f\x7f\xdd\x8c\xd1\x46\x2e\x83\x9c\x1a\x2f\x08\x55\xa4\x52\x5c\x37\x12\x9b\xe2\x19\xf6\x3c\x75\x44\x6f\xb3\x71\x22\xab\x45\x68\x15\xa4\x8e\x11\x46\xe0\x93\xab\x52\x83\x14\x35\x65\xde\x4d\x33\x91\x4d\x85\xfd\xa4\xa3\xcb\xcd\x0c\x2c\x09\x93\xba\xdb\x4a\x03\xe8\x2b\x24\x5a\x3b\xbf\xae\x50\x75\xa5\x0b\xe8\x11\xe0\x36\xd0\x84\x75\x51\x2a\x4b\x59\x83\x2c\x80\xef\xf9\xa0\xe2\x52\x09\xd2\x6b\xeb\x4a\xac\x8d\xb8\xb0\x9e\x7a\x3d\x5a\x77\x7c\xc7\x43\xe4\x62\xa2\xbd\x50\xc1\xaf\x39\x85\x8a\x5c\x83\x3b\x17\x9d\xd9\xfe\xcf\xe0\x1d\x47\x99\x6e\x62\x6b\xc4\x54\x45\x1f\x18\x0e\x9f\xc6\x1a\xa2\xef\x21\xab\xdf\x1b\xed\xa0\xc3\x22\xed\xf7\x24\xc6\x92\x94\x36\xc7\x7e\xee\xad\x11\xd0\xc4\x66\xaa\x9d\x35\x13\x54\x92\xae\xc7\x32\x46\x50\x69\xcc\x15\x78\x83\x9a\x97\xc4\x33\x2e\x9a\x20\x47\x3d\x4a\x7c\xb5\xe4\xbd\xf0\x13\x96\xdb\xab\x5f\x60\x46\xb5\x4d\xd0\xaa\x94\xce\x70\x45\xe5\x85\x4a\x35\x4a\x6f\x42\x35\x87\x33\xc3\x8c\x81\x04\x04\xb6\xc0\x51\x1a\xeb\xd1\x58\x06\x12\x98\x4b\xed\xd4\x49\xe9\xb0\xae\xd9\xc4\xc4\x03\x82\x04\x62\x7c\x33\x1c\xea\x42\xc3\x47\x4a\xfb\xea\x47\x5b\x4c\x8f\xb8\x94\xa6\xad\x5d\x9f\xfd\x4f\x40\xc4\x8e\x3e\xf8\x6a\xb2\xad\x56\x2b\x63\x46\xda\xbf\xa9\xb8\xfe\x89\xd5\x06\x9d\x23\xa1\xfb\x24\x2f\x11\xb1\x06\x4f\xef\xa5\x49\xa6\xaa\x87\xf2\xde\xa9\xf7\x6f\x5c\x23\xb0\x3e\x02\x93\xb8\x1c\x4f\xec\x94\x11\x10\x90\xc3\x5d\x3c\x24\x89\x46\xd4\x10\x6e\xc2\x94\xe3\x16\x89\x9b\xdc\x77\x26\xeb\x5e\x71\x2c\x46\x09\x09\x1f\xe6\x4d\x15\xda\x5a\xb2\xe7\xf8\xb2\xc1\x64\x44\x59\x6a\xcc\x6d\x29\x12\x3a\x42\x3a\x08\x9f\xfe\x2e\x81\x1d\x74\xb5\x6c\xfc\x92\x56\x18\xb7\xd1\xad\x01\xfe\xe2\x43\x00\x75\xd7\x2d\x11\x4a\x34\x24\x98\xe0\x19\x35\x92\xa1\x7a\x37\xfa\xc7\x08\x3e\xb4\xe9\xb2\x0d\x6e\x03\xf3\xcd\xf2\xbe\x34\x41\x2f\xd0\xcb\x97\xfd\xb7\x67\xfd\xff\x1e\x9f\xf7\x4f\x1f\x8c\xa9\x36\x24\x71\xb5\x36\xa0\x64\x61\x6d\x40\x6d\xd0\x5b\x36\x2c\xf7\x96\x34\x98\xc7\x62\x24\xdd\xf1\x4b\x87\xa7\xc4\x52\x0c\xf1\xce\x70\xcd\x60\x9e\x4d\x41\x0c\x8b\x1d\xf9\x5e\xce\xd2\xcb\xce\x20\x6a\x66\x88\xbd\x84\xf7\xc7\x41\xd2\xe1\x4b\xfe\x10\xf0\x7a\x0d\x3a\x7d\xf8\x23\xd8\xcb\xa7\x43\x7c\xa3\x92\x4c\x62\x36\xf4\x7c\xe7\x20\xfe\x6c\x03\xb9\xdf\xbf\x59\xdd\x0c\x20\x29\xed\xf6\x2a\xe2\xe5\xd5\x64\xcd\x01\x1e\x98\xf7\xf0\x4b\xb7\x5f\x34\xc6\xc4\x4e\xaf\x27\x2b\xb5\x53\x4d\x27\x11\x42\xeb\xee\xa1\x4d\xaa\x2a\xa8\x57\x94\xeb\xd7\xd2\xe3\xc7\x62\xbe\x12\x75\xd1\xe3\xb2\x29\x24\x69\xbd\xf6\x16\xb8\x96\x17\xda\xa3\x5e\xf2\x57\x00\x00\x00\xff\xff\x25\xac\xf3\xfb\xb7\x0b\x00\x00"

func dataAwsSimpleBuildBuildNodeShTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleBuildBuildNodeShTpl,
		"data/aws-simple/build/build-node.sh.tpl",
	)
}

func dataAwsSimpleBuildBuildNodeShTpl() (*asset, error) {
	bytes, err := dataAwsSimpleBuildBuildNodeShTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/build/build-node.sh.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsSimpleBuildTemplateJsonTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x5d\x6f\x9b\x30\x14\x7d\xe7\x57\x58\x48\xe9\x53\x80\x6c\xad\xa6\x69\xaf\xfb\x19\x55\x44\x0d\xb8\xe1\x2a\xb6\xb1\x7c\x4d\xa6\x16\xf9\xbf\xef\x9a\xef\x4c\x0d\xcd\x9a\x17\x23\x9f\xc3\x39\xc7\x87\xeb\x74\x11\xa3\x5f\xac\x40\xe7\x86\x97\x67\x61\xf3\x8b\xb0\x08\x8d\x8e\x7f\xb1\xf8\x90\xfe\x4c\x0f\xf1\x3e\x1a\x38\x17\x6e\x81\x17\x52\x20\x41\xc3\x6b\xb4\xc9\xff\x60\xce\xcb\x52\x20\xe6\x67\xf1\x46\x88\x6e\xa5\xdc\xaf\x51\x14\xa5\x15\xee\x16\x6a\xc5\x69\x30\xbb\x42\x50\xb6\x27\xca\xe3\xea\x11\xe8\xf7\xfd\x14\xc4\xd8\xe6\x02\x21\x23\x25\x25\xc2\xf3\xf8\x56\xb7\x63\xaf\x8d\x65\x15\x58\x06\x9a\x1e\x5b\x5d\x71\x47\xac\x9c\x76\x30\x2d\x5a\x90\x15\xdb\xf9\x89\x3c\xae\x24\xe7\xde\x8c\x08\xa7\xc5\x5a\x48\x19\xef\x17\x00\xb4\x04\x1d\xa0\xe7\x58\x9d\x83\x6c\x62\x58\xe6\x94\xc9\x1a\xe7\x9a\x6c\x31\x48\xba\x2e\x38\xcb\xa6\x31\xe9\x6f\xda\x75\xc2\x32\xef\xe3\xe3\xa8\xe4\xf7\xb7\x3d\x5f\x41\x8a\xb5\x25\x36\xad\x2d\x7b\x84\x34\x83\xa5\xf7\xd9\x1a\xaf\x04\x3a\xd0\xbd\x6b\x20\xfd\x47\x9a\x3b\xc2\x6c\x15\x50\x56\xf7\x1e\xdd\x7b\xf6\xf0\xc0\x0a\x8e\x35\x4b\x33\xc5\x41\xa7\x58\x7f\xd0\xc5\x8e\x09\x5d\x85\xef\xb5\xf5\x49\x36\xea\xd9\x31\x1a\xd4\x82\x42\x28\x52\xa0\x14\x2d\xd2\x39\x5f\xe6\xc1\x79\xa1\x33\x0f\x1e\x2b\xda\x3d\x4d\x26\xdc\x98\xd4\x9d\xde\xbf\x54\x18\x96\x16\x8c\x0b\x50\x3f\x6e\x89\x6e\x2a\x11\x8e\x3f\x69\xf5\xeb\x71\x9a\xe3\x9e\x33\xce\xf0\x7c\xa1\x34\x57\xbd\x76\xc8\x32\x4b\xcf\x8e\x5c\xf1\x77\x6a\x5d\x14\xb8\x60\x57\xd7\xef\x56\x31\xd7\xf7\x74\xbb\x9d\xf8\xea\xca\x6e\x29\x2e\xc4\x4f\x14\xe7\x6b\xbe\xa5\x36\x90\x3e\xcb\xd6\x8f\x40\xce\x15\x0c\x7d\x40\xf2\xfd\xdb\x8f\xc7\x43\xf5\xf4\xb4\x70\x40\xa3\xe3\x9a\x58\x53\x6d\xe5\x63\x2a\xb9\x3d\x89\x95\x0c\xd6\x79\x70\x9e\xea\x6e\x0b\x1a\xde\x76\x55\xaa\x82\x7c\xc2\xba\x2e\x3c\xd1\x5c\xff\x9b\x9d\x56\x9a\x22\xae\xcc\x47\x89\x87\xff\xac\x63\x14\xf9\xe8\x6f\x00\x00\x00\xff\xff\xa2\x67\x64\x41\x65\x05\x00\x00"

func dataAwsSimpleBuildTemplateJsonTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleBuildTemplateJsonTpl,
		"data/aws-simple/build/template.json.tpl",
	)
}

func dataAwsSimpleBuildTemplateJsonTpl() (*asset, error) {
	bytes, err := dataAwsSimpleBuildTemplateJsonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/build/template.json.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsSimpleDeployMainTfTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x53\xc1\x8e\xdc\x2a\x10\xbc\xcf\x57\xb4\xd8\x3d\xbe\xf5\xcc\xcb\x31\x52\x6e\x91\x72\x4b\x3e\x20\x5a\x21\x8c\x99\x09\x5a\x0c\x08\x9a\x89\x2c\xcb\xff\x9e\x06\x62\x31\x38\x9b\x6b\x3c\x27\xaa\x8b\x2e\xba\xba\xe6\x09\xbe\x28\xab\x82\x40\x35\xc1\xb8\xc0\x37\x44\xf7\x1f\x4c\x0e\xac\x43\x50\x93\x46\x98\x85\x4d\xc2\x98\xe5\x74\xba\x8b\xa0\xc5\x68\x14\x30\x6d\xaf\x41\x70\x3d\x31\x58\xb7\x07\x58\xfc\x8c\x5c\x48\xa9\x62\xe4\x6f\x6a\x79\xa7\x18\x95\x0c\x0a\xff\x52\x0c\xea\xa6\x9d\x3d\x14\x88\xca\xad\x98\x55\x81\x1f\x2f\xcc\xfa\xc0\xd4\x36\xa2\xb0\x52\x71\x5c\x7c\xa6\xc3\xa4\xae\x22\x19\x84\x4f\xc0\xf0\xc3\x30\x6b\x19\x1c\x83\xc7\x1b\x31\x8d\x96\x5e\xe3\xd3\x68\xb4\x3c\x74\xbb\x7b\xc9\xa5\x9e\xc2\x3b\xf0\xef\xb1\x4f\x3e\xb8\xbb\x9e\x54\x28\xaf\x27\xe8\x04\xd0\x86\xcf\xaa\xcf\x2b\x5d\x1c\x7a\x53\x36\x46\xb4\x66\x43\x4f\x6b\x78\xa1\x55\x43\x20\x7f\x1d\xad\xe2\x44\xa1\x47\x04\x15\x5d\x0a\xb2\xf9\x9b\x82\xc6\x85\xdf\x82\x4b\x9e\x11\xe8\x7d\x7d\x59\xf6\xb0\xf6\x59\xd7\x7a\xd8\xb6\x97\xda\x72\x5f\x66\xd1\xac\x03\x36\xbd\x7a\xa6\x12\xd5\xb4\xbd\x91\x5c\x2c\xfd\x00\x68\x7c\x74\xd2\x99\xfa\xbc\x97\xff\x0b\x78\x0d\x6e\xe6\xde\x05\x2c\xe0\xa5\x60\xe8\x76\xa4\x61\xd9\x5a\x3e\x1a\x27\xdf\x22\x61\xdf\xd9\x65\x28\xbf\xf3\x85\xbd\x52\x7d\xcb\x6a\xea\x9f\x89\x91\xdc\x13\x7c\x56\xde\xb8\x05\x04\x2d\x07\xc1\x5d\x61\x8f\x53\x3c\x58\xbc\xe3\x8f\xe6\x52\x18\xa1\x7d\x6d\x57\xb3\x2e\x9e\x76\xc9\x6c\xe5\x0e\xae\xb9\xa8\x81\x24\xff\xbb\x3e\x5d\x4e\x0b\x71\xff\x57\x1c\x04\x77\xb8\xae\x2b\xaf\xae\x0f\x04\x75\xae\x0e\x3c\xaf\x7f\xa6\x65\xa0\x71\x86\xbc\xea\xd7\x7c\x19\xc5\x8d\xbc\x87\xaf\x59\xa4\x0b\x0d\xab\x86\xb9\x84\x3e\x21\xb0\x14\x4c\xf5\xe0\x2e\x4c\x2a\xd4\x1f\x88\xfe\xe3\xf9\x5c\x25\xf6\x19\x4b\xf3\x3a\x00\x9f\x6c\xdc\xce\x39\xbc\xbf\x02\x00\x00\xff\xff\x05\xad\xee\xc5\x7b\x04\x00\x00"

func dataAwsSimpleDeployMainTfTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleDeployMainTfTpl,
		"data/aws-simple/deploy/main.tf.tpl",
	)
}

func dataAwsSimpleDeployMainTfTpl() (*asset, error) {
	bytes, err := dataAwsSimpleDeployMainTfTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/deploy/main.tf.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\x6f\x6f\xd3\xc8\x13\x7e\xef\x4f\x31\xb8\xfc\x69\xd5\xda\x86\xaa\x42\x3f\xf5\x07\xd5\x71\x2d\x7f\x2a\xdd\x15\x44\xcb\xbd\x39\x9d\xc2\xc6\x9e\xd8\x7b\x6c\x76\x97\xdd\x75\x9a\xd0\xe6\xbb\xdf\xcc\xda\x6e\x13\xda\x2b\x45\x27\x11\x70\x26\x33\xcf\xcc\x3c\x33\xcf\x98\x0d\x78\x8b\x1a\x9d\x08\x58\xc1\x78\x01\xef\x43\x30\x3b\x50\x19\xd0\x26\x00\x56\x32\x3c\x48\x36\x92\x0d\x38\x6b\xa4\x07\xfa\x13\x1a\x84\x3f\x44\xed\x84\x0e\x13\xa9\x10\xea\xef\x63\x61\x62\x5c\xf4\xaa\x70\x86\xca\xd8\x29\xea\x00\x66\x42\x10\x81\x21\x84\xb5\x4a\x96\x22\x48\xa3\x0b\x8f\x6e\x26\x4b\xcc\xe1\x38\x80\x6f\x4c\xab\xaa\x98\x74\x8c\xd0\x08\x5d\x65\x9c\x1c\xab\x1c\xce\x0c\x4c\x4d\x25\x27\x0b\x86\x25\x9c\x95\xf4\x3b\xd0\x7a\x8c\xd9\x5e\x59\xcb\x86\x3c\x49\xfa\x9f\xf3\xd2\xe8\x89\xac\x5b\x87\x9b\xe9\x6e\xba\xc5\x1d\x5d\x76\xa6\xcb\x04\xa0\x7b\xca\x67\xd3\x7c\x6c\xe6\xf0\x12\xd2\x46\xf8\x46\x96\xc6\xd9\xc2\x3a\x2c\xa5\xc7\xe7\x7b\x69\x42\x8e\x1b\xf0\xce\x78\x6a\x40\xab\x05\x68\x0c\xe7\xc6\x7d\x59\x0b\xef\x6d\x90\x5a\x27\x67\xc4\xc3\xa8\x37\xa4\x3b\x20\xed\x3e\xa4\x17\x17\x4c\xc4\x48\xda\x91\xa8\x2a\x87\xde\xc3\x72\xd9\x03\x9f\x62\x68\x2d\x08\xf0\x0b\x5d\x12\x7f\x13\xa3\x2a\x74\x30\x71\x66\x0a\xa6\x75\xc0\x28\x52\xd7\x50\x49\x2a\x28\x18\x47\xed\x1b\x28\x66\x5d\x77\x6b\x35\x74\x00\xa3\x1e\xe0\x09\xa5\xb4\x22\x34\xf9\x00\xb0\x5c\x3e\xd9\x81\x74\x88\x4c\x77\x28\x16\xc0\x9c\xd3\xdc\xa8\xbe\x2b\x2b\xd4\xce\xb4\x76\xc5\xd2\x15\xf9\x5a\x8b\x31\x8d\xf9\xf4\xf4\x1d\x88\x9a\x47\x49\xe3\x3d\x17\xae\x62\x60\x6f\x68\xfc\x21\xf0\x63\xdf\x3d\xf5\x6a\x51\x57\xa8\x4b\x89\x3e\x76\xe0\xaf\x2b\xf5\xbe\xc9\xfb\xe8\x51\x87\xf5\x12\x82\x6b\xb1\x4b\xf4\xc6\xb4\xba\x8a\x7b\x01\xc3\xe4\xba\x6f\x9b\x72\x02\x42\x2f\xb6\xc8\xeb\xe2\x51\xdc\x2e\x62\x04\xa4\xa6\xc7\x21\x62\x44\x16\x9f\x13\xcf\xf0\x68\x49\x6e\xfc\x3b\x8d\xb4\x30\xb4\x8e\xc5\xb5\x57\x46\xc4\x50\xb8\x32\xc6\xe6\x87\x64\x0d\x44\x16\x0f\xe3\x6e\x2a\x19\x2c\x32\x48\x0f\x6b\xae\xd6\x99\x99\xf4\x5c\x61\xea\x1b\x54\x8a\x27\xae\x95\xd4\x48\x1c\x96\x15\x6c\x5c\x50\xc0\x12\x1e\x3f\x86\x31\xad\x56\xff\xb5\x98\x0a\xa9\x73\xdf\xa4\x5d\x33\x44\x15\xf7\x43\x45\x47\x0a\x7e\x33\xa2\x02\xa1\x54\x1c\xff\xc4\x89\x9a\xb5\xe3\xa1\x41\x87\xb1\x6f\x62\x61\x8d\xe0\xfc\x9a\x92\xc1\x9b\x79\xe1\x7d\xbb\x8e\x8e\x8c\x70\xe7\xbd\xe5\xd2\x21\x65\x59\x2e\x6f\xad\xe0\x58\xfb\xc0\x05\x8c\x5b\x49\x62\x44\x3d\x93\xce\x68\x8e\xba\x6f\xe7\x0f\x7d\xe9\xa4\x0d\x23\x92\x79\x72\x33\x86\x39\xdd\xb7\xc2\x51\x0a\x54\x3e\x4a\xd2\xee\x80\xb9\xec\x36\x72\x45\x8d\x57\x3e\x45\x3b\xa6\x41\xb5\xd9\xb3\xdd\xfc\xe9\x1e\xb3\x46\x05\x27\xfc\x49\x56\x32\x51\xc4\x8b\x17\xa7\x87\x1f\x8f\x3f\x9c\x25\x1e\x03\x64\xb4\x52\x1b\xc0\xd3\xcf\x70\x8e\xe5\x3e\xf0\xdf\x2d\x6d\x67\x69\xa6\x53\xba\x2c\x70\x2e\x43\x43\x24\x07\xdb\x06\x50\xa6\xae\xf9\x7a\xd1\x23\x1f\x9f\x4a\x7a\xab\xc4\x02\xab\xc4\xe0\xe6\x16\x5c\xc0\xc3\x5f\x60\xf7\xe0\xf1\x33\xb8\xec\x3c\x1d\x64\x21\x42\xc3\x01\x14\xc4\x74\xa1\x5b\xa5\xfe\x0f\xcb\xab\x8c\xe4\xb5\x3f\x60\x0b\xd2\x05\x4e\xe4\x9c\xf0\xa7\x24\x7d\x5a\xfa\xc4\xa8\x88\x8a\x65\x63\x20\xfd\x93\x23\xfe\xa2\x14\x69\x8f\xf0\xbb\xf8\x82\x20\x03\x2b\x2b\x34\x22\xc0\xe7\x5e\x8c\x40\xda\xf9\x0c\xb5\x21\x51\x75\xe7\x40\xc5\x6b\xc0\x87\x8f\x6e\x16\x1b\xe2\x7a\x76\xa8\xb4\x7c\x57\x62\x87\x03\x2a\xb3\x31\x53\x1c\x2c\x45\xce\xeb\xe8\x4a\xce\x76\xd8\xeb\x8c\x05\xcc\x02\x8f\x8b\x24\x3c\xeb\x82\xba\x90\x3a\x21\xe5\x3d\xa0\xbb\x80\x16\xd2\x4f\x1e\x8f\x4e\x4e\x89\xa2\x14\x0a\x0c\x65\x41\x05\xf1\xa7\x1a\x75\x23\x86\x83\x15\x32\xa8\x2c\xcd\xa3\x8a\xd5\xac\x04\x5e\x82\x6f\x69\xe6\x01\x11\x32\xf1\x23\x18\x02\x30\xd8\x05\xf4\xef\x09\x26\x01\xe8\x84\x06\xe1\x42\x32\x91\x49\x82\x73\x6b\x5c\x80\xa3\xd7\xbf\x1e\xbf\x3a\x19\xbd\xf9\xf8\xfe\xe4\xec\xf5\xc9\xd1\x4b\x6d\xb4\x64\x71\x8b\x32\xc8\x19\x31\xde\xa3\x08\x1b\x32\x3a\x57\xd0\xda\x8a\x2f\x55\xb6\x48\x68\x18\x90\x1e\xd1\x25\x54\x24\x3c\x26\xe1\xc4\x54\xc8\x5a\xd1\xf4\xef\x68\x86\x2e\xee\xf8\x72\x99\xe7\x79\xca\x30\xe7\x1c\x9e\x7d\x85\xec\xfd\x77\x9c\xb2\x7f\x4e\x65\xe5\xf5\x37\x68\x42\xb0\x7e\xbf\x88\xb6\xbf\x7d\x6e\x5c\x5d\xd0\x4e\x85\x62\x76\x13\x37\xfa\x64\xb7\xfc\x90\x91\x98\xda\x79\x36\x7f\xbe\xd7\xa3\x76\xa5\x7e\xd2\xf4\xcd\x0d\x85\x0e\x55\x75\x9c\x0a\x5a\xcc\x43\x28\x8c\xa5\x0a\xe7\xdf\x26\xff\x5e\x60\x07\x75\xda\xdf\x6d\x7a\x01\x7d\x78\x75\xf6\x6e\x0d\x4b\x69\xc8\x7c\x84\xba\x47\x81\xc5\x58\xea\xe8\x06\x45\xeb\x5d\xa1\x4c\x29\xd4\x95\xed\xbf\x40\xda\xe9\x0d\x44\x3b\xed\x8a\xef\xaf\x14\xd7\x1f\x0f\x55\x46\xda\xa2\x1b\x25\x85\x8a\x2b\xac\x05\xcf\x9d\xde\x81\xe5\x17\x52\x9c\x5f\xeb\x6d\x58\x02\xd9\x1f\xba\x6c\xf1\x3d\xc4\x8d\x14\x6f\x0f\x0f\x8b\xb7\xdb\xdb\xb0\x97\xff\x0f\x36\x1d\x7e\x6d\x49\x80\x55\x97\x08\xcf\x49\x2a\x71\x69\xfa\x3e\xfc\xd6\x8f\xb2\xd9\x45\x68\xe8\x55\xe4\xcd\x24\xd0\x8b\x10\x33\xba\x8b\x16\x5d\xe0\xd7\xe5\x2d\xb6\x8c\x2f\x96\xd1\xd7\x80\x55\x95\x31\x28\x49\xd2\x78\x19\xff\x53\xc0\x98\x56\xec\xf7\x77\x32\x18\xa3\xca\x86\x5e\x32\x99\x2b\x02\x49\xe5\x8e\xed\x1f\x7e\xe9\x2c\x99\x50\x24\x99\x8e\x3a\x0f\x19\x65\x98\x9a\x19\x5b\x15\xd4\x65\xf9\x13\xce\xdb\xdb\x77\xb5\x4f\x58\x19\x11\x79\xa7\xcb\xf6\xf6\x9a\xcb\xed\x29\x87\x80\xb8\x23\xbc\x1d\x84\xcc\xe8\x6b\x06\xc6\x81\xdd\xa7\x3f\x0d\x45\xd3\xe6\xcf\xaa\xe1\x7e\x50\xfd\x15\xfb\x31\x63\x83\x23\xb1\x95\xf4\x6f\xae\x7f\x02\x00\x00\xff\xff\x1c\x0d\x0c\xc0\x88\x0b\x00\x00"

func dataCommonDevVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevVagrantfileTpl,
		"data/common/dev/Vagrantfile.tpl",
	)
}

func dataCommonDevVagrantfileTpl() (*asset, error) {
	bytes, err := dataCommonDevVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/aws-simple/build/build-node.sh.tpl": dataAwsSimpleBuildBuildNodeShTpl,
	"data/aws-simple/build/template.json.tpl": dataAwsSimpleBuildTemplateJsonTpl,
	"data/aws-simple/deploy/main.tf.tpl": dataAwsSimpleDeployMainTfTpl,
	"data/common/dev/Vagrantfile.tpl": dataCommonDevVagrantfileTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"aws-simple": &bintree{nil, map[string]*bintree{
			"build": &bintree{nil, map[string]*bintree{
				"build-node.sh.tpl": &bintree{dataAwsSimpleBuildBuildNodeShTpl, map[string]*bintree{
				}},
				"template.json.tpl": &bintree{dataAwsSimpleBuildTemplateJsonTpl, map[string]*bintree{
				}},
			}},
			"deploy": &bintree{nil, map[string]*bintree{
				"main.tf.tpl": &bintree{dataAwsSimpleDeployMainTfTpl, map[string]*bintree{
				}},
			}},
		}},
		"common": &bintree{nil, map[string]*bintree{
			"dev": &bintree{nil, map[string]*bintree{
				"Vagrantfile.tpl": &bintree{dataCommonDevVagrantfileTpl, map[string]*bintree{
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

