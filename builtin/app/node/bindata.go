// Code generated by go-bindata.
// sources:
// data/aws-simple/build/build-node.sh.tpl
// data/aws-simple/build/template.json.tpl
// data/aws-simple/deploy/main.tf.tpl
// data/common/dev/Vagrantfile.tpl
// DO NOT EDIT!

package nodeapp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAwsSimpleBuildBuildNodeShTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\x7f\x6f\x13\x39\x10\xfd\x7f\x3f\xc5\x90\x56\xf4\x4e\xaa\x77\xdb\x0a\x38\x68\x01\x5d\x5b\x5a\xa8\x84\x52\x54\x40\x77\x12\x70\xd5\x66\x77\x92\xf8\xba\xb1\x17\xdb\x9b\x26\x2d\xf9\xee\xf7\xc6\x9b\x1f\x8d\x0a\x08\xe9\xfe\x69\x37\xb6\x67\xfc\x66\xe6\xcd\x1b\x6f\x3c\xc8\x7a\xda\x64\xbd\xdc\x0f\x93\xc4\x73\x20\x65\xc9\xd8\xc6\xcc\x3f\xd9\x39\x9e\xe8\xf8\x59\xeb\x9a\xfb\xb9\xae\xe6\xcb\xc1\xe5\x05\x27\x09\xbe\xac\xfb\xed\x77\xba\x4d\x88\xa8\xb2\x45\x5e\x91\xb7\x8d\x2b\xb8\xaf\x2b\x7e\xb1\xb9\xbb\x5a\xae\xb4\x61\x63\x5f\x6c\xee\xc9\x12\x17\x43\x4b\x9d\x93\x8b\x8b\xf3\x0b\xca\x03\x6d\xde\xae\x8c\x66\xfb\x9b\xb7\xed\xd9\xd9\x01\xbd\xcd\x7d\x80\xfd\xc0\xef\x77\xc4\x6c\xe0\xb8\x26\x1b\x82\xa5\x6c\x9c\xbb\x0c\x1b\x99\x9f\x7a\xfc\xa3\x6f\x14\x22\x36\x43\x7b\x3b\xc9\x2c\x01\xba\x9a\xb6\x22\x38\xea\x6c\xde\x1e\x1d\xbe\x7f\x73\xf9\xfe\xfc\xe3\xc5\xf1\xc9\xac\x23\x0b\x6f\xcf\xba\x27\xdd\xf3\x59\x67\x8b\x80\x21\x49\x2c\x4b\x08\xd8\xf8\xb3\x43\x7b\x2f\x1f\xee\xc2\x1d\x9c\x0e\xd8\x91\x0a\xed\x7d\x2f\x29\x2b\x79\x9c\x99\xa6\xaa\x0e\x68\x96\xd8\x2a\x1a\xb4\x61\x7c\x92\x13\x5f\x08\xc6\xb2\x95\x6c\x50\x51\xd9\xa6\x54\x85\x35\x7d\x3d\xa0\x22\x37\xa4\x4d\x60\xd7\x67\xc7\x74\xad\xc3\x90\xf2\x3a\x50\x61\x47\xa3\xdc\x94\x9e\x74\x9f\x74\xd8\xf2\xe4\x83\xae\x2a\x9c\xa4\xda\x59\xc4\xe9\x3d\x2e\xa1\xce\x5f\xb9\x0e\xda\x0c\xa8\x8f\x40\xd6\xdc\x02\x13\x5c\xd4\x15\x07\x4e\xd3\xb4\x93\x34\x06\xf6\xf4\xe9\x13\xa9\xfe\x3c\x39\xba\x97\x45\x8b\x4c\x1b\x1f\x72\x53\x70\xd6\xb3\x36\xa8\xbe\x36\xda\x0f\xb9\xa4\x2f\x5f\x0e\xa8\xb4\x48\xab\xaf\x18\x69\xdd\x49\x1f\x27\xa5\x35\xa8\xa9\xdc\x7b\x58\x96\x72\xad\x20\x45\xce\xad\xd7\xc1\x3a\xcd\x9e\x00\x99\x9a\xba\xcc\x05\x54\xbc\xd7\x32\xf9\xa6\xb4\x72\x52\x0d\x40\x9a\xb8\xc9\xa4\xa6\xf7\x76\x22\x0c\x84\xa8\xa6\xa0\x48\x3f\x5c\xe7\x8e\x15\x62\xad\xd9\x05\x78\x56\x92\x10\x6b\xd6\xac\xae\x78\x4a\x79\x39\x26\x25\x5f\x9e\xdd\x18\x05\x19\x5e\xd5\xfb\x59\xb6\xfc\x9d\x36\x3d\x44\xde\xa4\xb0\xde\x7f\xba\x83\x93\x8e\x8b\x71\x3c\x4e\x8f\x9f\xec\x9e\x3e\x3b\x7a\x76\x7c\x78\xfc\x68\xe7\x68\xef\xf4\x8f\x24\x56\x6b\xab\xe4\x1e\x0d\x43\xa8\x3d\xdc\x58\xef\x15\xe8\x9f\x4b\x68\x69\x3d\x6c\xbc\xb6\xa6\xce\xbd\x67\x83\xda\x8b\xcf\x0c\x30\xb2\xe5\x0a\x05\xd7\xf8\x30\xa5\x51\xae\xcd\x16\x38\x12\x81\x06\x66\xca\x38\x14\xf1\x68\x4b\x63\x9f\x56\xda\x87\xb4\x5c\x59\xc6\x85\xbb\x24\xfa\x41\xde\xda\xe4\xbf\xb2\xd7\xa6\xb2\x79\xac\x40\xd7\x96\x4c\xb7\xb7\x68\xca\x92\x2f\x11\xb0\x40\xa4\xd9\x6c\x91\xfb\x6b\xb1\x55\x5f\x49\x9d\x53\x16\x46\x75\x26\xc7\xd2\x90\xbb\x74\x70\xb3\x8c\x52\xd6\xfe\xf5\xa9\x75\x83\xac\x04\x8c\x6c\x7c\xdf\x5d\x3c\xa3\xbe\xb3\xa1\xd0\x8a\xcd\x44\x4d\x9e\x3c\x9a\x7b\x6d\x11\x7e\x34\xf8\xe5\x16\xf8\xd6\x88\x80\x0d\x52\xc7\x94\x59\x50\x47\x4d\x6e\xfa\xf7\x70\xb5\x1e\xde\x73\x88\xc4\x6e\x6a\x7a\x77\xf8\xe1\xcd\x9a\x8b\xca\x90\xf2\xd1\xc3\x2f\xe0\x8a\xfa\x25\xbb\x94\x35\x5e\x34\x01\x62\xb3\x5c\xfb\x3f\x2e\xeb\xd1\x3d\x8f\xf5\xa8\x05\x7f\xd6\x52\x59\xf0\xbf\x5b\x94\x78\x9b\xba\x03\x6d\x26\xdb\xb1\x45\x6c\x18\x82\x2e\xbe\xa9\x6b\xeb\x62\x98\x75\x5e\x5c\xe5\x03\x30\x43\xe2\xe4\x89\x2c\xd3\xab\x93\xa3\xb3\xc3\xee\xe5\xe9\xc5\x79\xf7\xc3\x49\xf7\xd5\x0b\x63\x4d\x14\x8a\xbc\x08\x7a\xcc\x3f\xeb\x9f\xde\x8d\xa3\x01\x64\x79\xc4\xae\x68\x9c\x86\xba\xf6\x1a\x5d\x95\x8a\x05\x4b\x90\xdf\x9f\xd1\xd7\x50\x80\xfa\xab\x02\xe3\xe8\x06\x9f\xbb\x83\xf8\xf9\xe3\xd6\x8b\x36\x72\x19\xc4\xd3\x78\x41\xa8\x22\x83\xe2\xba\x91\xd8\x14\x4f\xb0\xe7\x69\x49\xeb\x36\x1b\x27\xb2\x5a\x84\x56\x2f\xea\x18\x61\x04\x3e\xba\x2a\x35\xb8\x50\x53\xe6\xdd\x38\x13\x91\x54\xd8\x4f\x96\x2c\xb9\x99\xcc\xc9\xb1\xd8\x4a\x03\x58\x2b\xdc\x59\x3b\xbf\xae\x47\x75\xa5\x0b\xa8\x0f\xe0\x36\x50\x80\x75\x09\x2a\x4b\x59\x83\x08\x80\xe6\x79\xaf\xe2\x52\x09\xd2\x6b\xeb\x4a\xac\x0d\xb8\xb0\x9e\x3a\x1d\x5a\x77\xbc\xe0\x21\x72\x31\xd2\x5e\xa8\xe0\xd7\x9c\x42\x33\xae\xc1\x9d\x8b\xa5\xd9\xfe\xf7\xe0\x1d\x47\x51\x6e\x62\x47\xc4\x54\x45\x1f\x18\x05\x1f\x86\x1a\x12\xef\x21\xa2\x5f\x1b\xed\xa0\xba\x22\xe4\x77\x04\xc5\x92\x94\x36\xc7\x7e\xee\xad\x11\xd0\xc4\x66\xac\x9d\x35\x23\x54\x92\xae\x87\x32\x34\x50\x69\x4c\x11\x78\x83\x76\x97\xc4\x13\x2e\x9a\x20\x47\x3d\x4a\x7c\x35\xe7\xbd\xf0\x13\x96\xdb\xab\x5f\x60\x46\xb5\x4d\x50\xa6\x94\xce\x70\x45\xe5\x85\x4a\x35\x4a\x6f\x42\x35\x85\x33\xc3\x8c\xf1\x03\x04\xb6\xc0\x51\x1a\xea\xc1\x50\xc6\x0f\x98\x4b\xed\x8c\x49\xe9\xb0\xae\xd9\xc4\xc4\x03\x82\x04\x62\x7c\xd3\xef\xeb\x42\xc3\x47\x4a\xfb\xea\x5b\x5b\x4c\x8f\xb8\x94\xa6\xad\x5d\x9f\xfd\x23\x20\x62\x47\x1f\x7c\x36\xd9\x56\xab\x8c\x31\x23\xed\xdf\x54\x5c\x7f\xc7\x6a\x83\xce\x91\xd0\x7d\x92\x77\x87\x58\x83\xa7\x77\xd2\x24\x33\xd4\x43\x67\x17\x5a\xfd\x13\xd7\x08\xac\x8b\xc0\x24\x2e\xc7\x23\x3b\x66\x04\x04\xe4\x70\x17\x0f\x49\xa2\x11\x35\x64\x9a\x30\xd3\xb8\x45\xe2\x46\x77\x9d\xc9\xba\x57\x1c\x8b\x51\x42\xb0\xfb\x79\x53\x85\xb6\x96\xec\x39\xbe\x63\x30\x07\x51\x96\x1a\x53\x5a\x8a\x84\x8e\x90\x0e\xc2\xa7\x5f\x24\x70\x09\x5d\xcd\x1b\xbf\xa4\x15\xc6\x6d\x74\x6b\x80\xbf\x38\xf6\x51\x77\xdd\x12\xa1\x44\x43\x82\x09\x9e\x51\x23\x19\xa1\x8b\x41\x3f\x44\xf0\xa1\x4d\x97\x6d\x70\x1b\x98\x6f\xe6\xf7\xa5\x09\x7a\x81\x9e\x3f\xef\xbe\x3e\xeb\xfe\x7d\x7c\xde\x3d\xbd\x37\x94\xda\x90\xc4\xd5\xda\x38\x92\x85\xb5\x71\xb4\x41\xaf\xd9\xb0\xdc\x5b\x52\x6f\x1a\x8b\x91\x2c\x8f\x5f\x3a\x3c\x1c\xe6\x62\x88\x57\x85\x6b\x7a\xd3\x6c\x0c\x62\x58\xec\xc8\xf7\x7c\x72\x5e\x2e\x0d\xa2\x66\x86\xd8\x4b\x78\x6d\x1c\x24\x4b\x7c\xc9\x2f\x02\x5e\xaf\xc1\x52\x1f\x7e\x09\xf6\xfc\xa1\x10\x5f\xa4\x24\x73\x97\x0d\x3d\xdd\x39\x88\x3f\xdb\x40\xee\xf6\x6f\x56\x37\x3d\x48\x4a\xbb\xbd\x8a\x78\x7e\x35\x59\x73\x80\xe7\xe4\x1d\xfc\xd2\xed\x17\x8d\x31\xb1\xd3\xeb\xd1\x4a\xed\x54\xb3\x94\x08\xa1\xf5\xf2\x59\x4d\xaa\x2a\xa8\x53\x94\xeb\xd7\xd2\xc3\x87\x62\xbe\x12\x75\xd1\xe3\xb2\x29\x24\x69\x9d\xf6\x16\xb8\x96\xf7\xd8\x83\x4e\xf2\x5f\x00\x00\x00\xff\xff\xf3\x99\x6a\x2a\xa5\x0b\x00\x00"

func dataAwsSimpleBuildBuildNodeShTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleBuildBuildNodeShTpl,
		"data/aws-simple/build/build-node.sh.tpl",
	)
}

func dataAwsSimpleBuildBuildNodeShTpl() (*asset, error) {
	bytes, err := dataAwsSimpleBuildBuildNodeShTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/build/build-node.sh.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsSimpleBuildTemplateJsonTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x5d\x6f\x9b\x30\x14\x7d\xe7\x57\x58\x48\xe9\x53\x80\x6c\xad\xa6\x69\xaf\xfb\x19\x55\x44\x0d\xb8\xe1\x2a\xb6\xb1\x7c\x4d\xa6\x16\xf9\xbf\xef\x9a\xef\x4c\x0d\xcd\x9a\x17\x23\x9f\xc3\x39\xc7\x87\xeb\x74\x11\xa3\x5f\xac\x40\xe7\x86\x97\x67\x61\xf3\x8b\xb0\x08\x8d\x8e\x7f\xb1\xf8\x90\xfe\x4c\x0f\xf1\x3e\x1a\x38\x17\x6e\x81\x17\x52\x20\x41\xc3\x6b\xb4\xc9\xff\x60\xce\xcb\x52\x20\xe6\x67\xf1\x46\x88\x6e\xa5\xdc\xaf\x51\x14\xa5\x15\xee\x16\x6a\xc5\x69\x30\xbb\x42\x50\xb6\x27\xca\xe3\xea\x11\xe8\xf7\xfd\x14\xc4\xd8\xe6\x02\x21\x23\x25\x25\xc2\xf3\xf8\x56\xb7\x63\xaf\x8d\x65\x15\x58\x06\x9a\x1e\x5b\x5d\x71\x47\xac\x9c\x76\x30\x2d\x5a\x90\x15\xdb\xf9\x89\x3c\xae\x24\xe7\xde\x8c\x08\xa7\xc5\x5a\x48\x19\xef\x17\x00\xb4\x04\x1d\xa0\xe7\x58\x9d\x83\x6c\x62\x58\xe6\x94\xc9\x1a\xe7\x9a\x6c\x31\x48\xba\x2e\x38\xcb\xa6\x31\xe9\x6f\xda\x75\xc2\x32\xef\xe3\xe3\xa8\xe4\xf7\xb7\x3d\x5f\x41\x8a\xb5\x25\x36\xad\x2d\x7b\x84\x34\x83\xa5\xf7\xd9\x1a\xaf\x04\x3a\xd0\xbd\x6b\x20\xfd\x47\x9a\x3b\xc2\x6c\x15\x50\x56\xf7\x1e\xdd\x7b\xf6\xf0\xc0\x0a\x8e\x35\x4b\x33\xc5\x41\xa7\x58\x7f\xd0\xc5\x8e\x09\x5d\x85\xef\xb5\xf5\x49\x36\xea\xd9\x31\x1a\xd4\x82\x42\x28\x52\xa0\x14\x2d\xd2\x39\x5f\xe6\xc1\x79\xa1\x33\x0f\x1e\x2b\xda\x3d\x4d\x26\xdc\x98\xd4\x9d\xde\xbf\x54\x18\x96\x16\x8c\x0b\x50\x3f\x6e\x89\x6e\x2a\x11\x8e\x3f\x69\xf5\xeb\x71\x9a\xe3\x9e\x33\xce\xf0\x7c\xa1\x34\x57\xbd\x76\xc8\x32\x4b\xcf\x8e\x5c\xf1\x77\x6a\x5d\x14\xb8\x60\x57\xd7\xef\x56\x31\xd7\xf7\x74\xbb\x9d\xf8\xea\xca\x6e\x29\x2e\xc4\x4f\x14\xe7\x6b\xbe\xa5\x36\x90\x3e\xcb\xd6\x8f\x40\xce\x15\x0c\x7d\x40\xf2\xfd\xdb\x8f\xc7\x43\xf5\xf4\xb4\x70\x40\xa3\xe3\x9a\x58\x53\x6d\xe5\x63\x2a\xb9\x3d\x89\x95\x0c\xd6\x79\x70\x9e\xea\x6e\x0b\x1a\xde\x76\x55\xaa\x82\x7c\xc2\xba\x2e\x3c\xd1\x5c\xff\x9b\x9d\x56\x9a\x22\xae\xcc\x47\x89\x87\xff\xac\x63\x14\xf9\xe8\x6f\x00\x00\x00\xff\xff\xa2\x67\x64\x41\x65\x05\x00\x00"

func dataAwsSimpleBuildTemplateJsonTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleBuildTemplateJsonTpl,
		"data/aws-simple/build/template.json.tpl",
	)
}

func dataAwsSimpleBuildTemplateJsonTpl() (*asset, error) {
	bytes, err := dataAwsSimpleBuildTemplateJsonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/build/template.json.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsSimpleDeployMainTfTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x53\xc1\x8e\xdc\x2a\x10\xbc\xcf\x57\xb4\xd8\x3d\xbe\xf5\xcc\xcb\x31\x52\x6e\x91\x72\x4b\x3e\x20\x5a\x21\x8c\x99\x09\x5a\x0c\x08\x9a\x89\x2c\xcb\xff\x9e\x06\x62\x31\x38\x9b\x6b\x3c\x27\xaa\x8b\x2e\xba\xba\xe6\x09\xbe\x28\xab\x82\x40\x35\xc1\xb8\xc0\x37\x44\xf7\x1f\x4c\x0e\xac\x43\x50\x93\x46\x98\x85\x4d\xc2\x98\xe5\x74\xba\x8b\xa0\xc5\x68\x14\x30\x6d\xaf\x41\x70\x3d\x31\x58\xb7\x07\x58\xfc\x8c\x5c\x48\xa9\x62\xe4\x6f\x6a\x79\xa7\x18\x95\x0c\x0a\xff\x52\x0c\xea\xa6\x9d\x3d\x14\x88\xca\xad\x98\x55\x81\x1f\x2f\xcc\xfa\xc0\xd4\x36\xa2\xb0\x52\x71\x5c\x7c\xa6\xc3\xa4\xae\x22\x19\x84\x4f\xc0\xf0\xc3\x30\x6b\x19\x1c\x83\xc7\x1b\x31\x8d\x96\x5e\xe3\xd3\x68\xb4\x3c\x74\xbb\x7b\xc9\xa5\x9e\xc2\x3b\xf0\xef\xb1\x4f\x3e\xb8\xbb\x9e\x54\x28\xaf\x27\xe8\x04\xd0\x86\xcf\xaa\xcf\x2b\x5d\x1c\x7a\x53\x36\x46\xb4\x66\x43\x4f\x6b\x78\xa1\x55\x43\x20\x7f\x1d\xad\xe2\x44\xa1\x47\x04\x15\x5d\x0a\xb2\xf9\x9b\x82\xc6\x85\xdf\x82\x4b\x9e\x11\xe8\x7d\x7d\x59\xf6\xb0\xf6\x59\xd7\x7a\xd8\xb6\x97\xda\x72\x5f\x66\xd1\xac\x03\x36\xbd\x7a\xa6\x12\xd5\xb4\xbd\x91\x5c\x2c\xfd\x00\x68\x7c\x74\xd2\x99\xfa\xbc\x97\xff\x0b\x78\x0d\x6e\xe6\xde\x05\x2c\xe0\xa5\x60\xe8\x76\xa4\x61\xd9\x5a\x3e\x1a\x27\xdf\x22\x61\xdf\xd9\x65\x28\xbf\xf3\x85\xbd\x52\x7d\xcb\x6a\xea\x9f\x89\x91\xdc\x13\x7c\x56\xde\xb8\x05\x04\x2d\x07\xc1\x5d\x61\x8f\x53\x3c\x58\xbc\xe3\x8f\xe6\x52\x18\xa1\x7d\x6d\x57\xb3\x2e\x9e\x76\xc9\x6c\xe5\x0e\xae\xb9\xa8\x81\x24\xff\xbb\x3e\x5d\x4e\x0b\x71\xff\x57\x1c\x04\x77\xb8\xae\x2b\xaf\xae\x0f\x04\x75\xae\x0e\x3c\xaf\x7f\xa6\x65\xa0\x71\x86\xbc\xea\xd7\x7c\x19\xc5\x8d\xbc\x87\xaf\x59\xa4\x0b\x0d\xab\x86\xb9\x84\x3e\x21\xb0\x14\x4c\xf5\xe0\x2e\x4c\x2a\xd4\x1f\x88\xfe\xe3\xf9\x5c\x25\xf6\x19\x4b\xf3\x3a\x00\x9f\x6c\xdc\xce\x39\xbc\xbf\x02\x00\x00\xff\xff\x05\xad\xee\xc5\x7b\x04\x00\x00"

func dataAwsSimpleDeployMainTfTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleDeployMainTfTpl,
		"data/aws-simple/deploy/main.tf.tpl",
	)
}

func dataAwsSimpleDeployMainTfTpl() (*asset, error) {
	bytes, err := dataAwsSimpleDeployMainTfTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/deploy/main.tf.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x55\x6f\x6f\xdc\xb6\x0f\x7e\xef\x4f\xc1\x3a\xfd\x93\x20\xb1\xfd\xfb\x15\x45\x31\x64\x6d\xb0\x2e\xe9\x9f\x00\x5b\x5a\x34\xe9\xde\x0c\xc3\x55\x67\xd3\xb6\x56\x9d\xa4\x4a\xf2\xe5\xae\xc9\x7d\xf7\x91\xb2\x9d\xdc\xb5\x59\x9a\x62\x40\xaf\xb1\x69\xea\x21\xf9\xf0\x21\xb5\x05\xaf\x51\xa3\x13\x01\x2b\x98\x2e\xe1\x6d\x08\x66\x0f\x2a\x03\xda\x04\xc0\x4a\x86\x7b\xc9\x56\xb2\x05\x67\xad\xf4\x40\xff\x42\x8b\xf0\x87\x68\x9c\xd0\xa1\x96\x0a\xa1\xf9\xfa\x2c\xd4\xc6\x45\xaf\x0a\xe7\xa8\x8c\x9d\xa1\x0e\x60\x6a\x82\x08\x0c\x21\xac\x55\xb2\x14\x41\x1a\x5d\x78\x74\x73\x59\x62\x0e\xc7\x01\x7c\x6b\x3a\x55\xc5\xa0\x53\x84\x56\xe8\x2a\xe3\xe0\x58\xe5\x70\x66\x60\x66\x2a\x59\x2f\x19\x96\x70\xd6\xc2\xef\x41\xe7\x31\x46\x7b\x61\x2d\x1b\xf2\x24\x19\x3e\xe7\xa5\xd1\xb5\x6c\x3a\x87\xdb\xe9\xe3\x74\x87\x2b\xba\xec\x4d\x97\x09\x40\xff\x94\xcf\x67\xf9\xd4\x2c\xe0\x39\xa4\xad\xf0\xad\x2c\x8d\xb3\x85\x75\x58\x4a\x8f\x4f\x9f\xa4\x09\x39\x6e\xc1\x1b\xe3\xa9\x00\xad\x96\xa0\x31\x9c\x1b\xf7\x69\xe3\xf8\x60\x83\xd4\x3a\x39\x27\x1e\x26\x83\x21\xdd\x03\x69\xf7\x21\xbd\xb8\x60\x22\x26\xd2\x4e\x44\x55\x39\xf4\x1e\x56\xab\x01\xf8\x14\x43\x67\x41\x80\x5f\xea\x92\xf8\xab\x8d\xaa\xd0\x41\xed\xcc\x0c\x4c\xe7\x80\x51\xa4\x6e\xa0\x92\x94\x50\x30\x8e\xca\x37\x50\xcc\xfb\xea\x36\x72\xe8\x01\x26\x03\xc0\x23\x0a\x69\x45\x68\xf3\x11\x60\xb5\x7a\xb4\x07\xe9\x78\x32\xdd\xa3\xb3\x00\xe6\x9c\xfa\x46\xf9\x5d\x59\xa1\x71\xa6\xb3\x6b\x96\x3e\xc9\x97\x5a\x4c\xa9\xcd\xa7\xa7\x6f\x40\x34\xdc\x4a\x6a\xef\xb9\x70\x15\x03\x7b\x43\xed\x0f\x81\x1f\x87\xea\xa9\x56\x8b\xba\x42\x5d\x4a\xf4\xb1\x02\x7f\x9d\xa9\xf7\x6d\x3e\x9c\x9e\xf4\x58\xcf\x21\xb8\x0e\xfb\x40\xaf\x4c\xa7\xab\xa8\x0b\x18\x3b\xd7\xbf\x6d\xcb\x1a\x84\x5e\xee\x90\xd7\xc5\x83\xa8\x2e\x62\x04\xa4\xa6\xc7\xf1\xc4\x84\x2c\x3e\x27\x9e\xe1\xc1\x8a\xdc\xf8\x3b\xb5\xb4\x30\x24\xc7\xe2\xda\x2b\x23\x62\xe8\xb8\x32\xc6\xe6\x87\x64\x0d\x44\x16\x37\xe3\x76\x2a\x19\x2c\x32\x48\x0f\x1b\xae\xd6\x99\xb9\xf4\x9c\x61\xea\x5b\x54\x8a\x3b\xae\x95\xd4\x48\x1c\x96\x15\x6c\x5d\xd0\x81\x15\x3c\x7c\x08\x53\x92\xd6\xf0\x5a\xcc\x84\xd4\xb9\x6f\xd3\xbe\x18\xa2\x8a\xeb\xa1\xa4\x23\x05\xbf\x19\x51\x81\x50\x2a\xb6\xbf\x76\xa2\xe1\xd9\xf1\xd0\xa2\xc3\x58\x37\xb1\xb0\x41\x70\x7e\x4d\xc9\xe8\xcd\xbc\xb0\xde\xae\x4f\x47\x46\xb8\xf2\xc1\x72\xe9\x90\xa2\xac\x56\x37\x66\x70\xac\x7d\xe0\x04\xa6\x9d\xa4\x61\x44\x3d\x97\xce\x68\x3e\x75\xd7\xca\xef\xfb\xd2\x49\x1b\x26\x34\xe6\x09\x61\x27\xc9\x9a\x81\x7a\xf2\xec\xd9\xe9\xe1\xfb\xe3\x77\x67\x89\xc7\x00\x19\x75\x7e\x0b\xb8\x49\x19\x2e\xb0\xdc\x07\xfe\xbf\x23\x11\x95\x66\x36\xa3\x05\x00\xe7\x32\xb4\xc4\x45\xb0\x5d\x00\x65\x9a\x86\x97\x0c\x3d\xf2\x8e\xa8\xa4\xb7\x4a\x2c\xb1\x4a\x0c\x6e\xef\xc0\x05\xdc\xff\x05\x1e\x1f\x3c\xfc\x3f\x5c\xf6\x9e\x0e\xb2\x10\xa1\xe1\x00\x0a\x22\xa4\xd0\x9d\x52\x3f\xc3\xea\x2a\x22\x79\xed\x8f\xd8\x82\xe4\x8b\xb5\x5c\x10\xfe\x8c\x26\x94\xb4\x99\x18\x15\x51\xb1\x6c\x0d\xa4\x7f\xf2\x89\xbf\x28\x44\x3a\x20\xfc\x2e\x3e\x21\xc8\xc0\x03\x10\x5a\x11\xe0\xe3\x30\x33\x40\x12\xff\x08\x8d\x21\xed\xf7\x53\xab\xe2\xd0\xf2\x7e\xa2\xd5\xc2\x86\xa8\xa2\x1e\x95\x34\x72\x35\x93\x70\x40\x69\xb6\x66\x86\xa3\xa5\xc8\x59\x35\xae\xe4\x68\x87\xc3\x38\xf0\x9c\xf1\x1c\xc6\x7e\x0b\xcf\xf2\xa5\x2a\xa4\x4e\x68\x40\xee\xd1\xf8\xa2\x85\xf4\x83\xc7\xa3\x93\x53\xa2\x28\x85\x02\x43\x59\x50\x42\xfc\xab\x26\x7d\xf7\xe0\x60\x8d\x0c\x4a\x4b\x53\x5f\xfb\x6c\xd6\x0e\x5e\x82\xef\x68\x5b\x06\x44\xc8\xc4\xf7\x60\x08\xc0\x60\x7f\x60\x58\xe7\x4c\x02\xd0\xa6\x0b\xc2\x85\xa4\x96\x49\x82\x0b\x6b\x5c\x80\xa3\x97\xbf\x1e\xbf\x38\x99\xbc\x7a\xff\xf6\xe4\xec\xe5\xc9\xd1\x73\x6d\xb4\xe4\x19\x14\x65\x90\x73\x62\x7c\x40\x11\x36\x64\xb4\x55\xa0\xb3\x15\x2f\x94\x6c\x99\x50\x33\x20\x3d\xa2\x85\xa5\x68\x3e\x98\x84\x13\x53\x21\x4b\x5a\xd3\xdf\xc9\x1c\x5d\x94\xe2\x6a\x95\xe7\x79\xca\x30\xe7\x7c\x3c\xfb\x0c\xd9\xdb\xaf\x38\x65\xff\x9c\xd2\xca\x9b\x2f\xd0\x86\x60\xfd\x7e\x11\x6d\x7f\xfb\xdc\xb8\xa6\x20\x4d\x85\x62\xfe\x2d\x6e\xf4\xc9\x6e\xf8\x90\x91\xe6\xbb\x45\xb6\x78\xfa\x64\x40\xed\x53\xfd\xa0\xe9\xcd\x8d\x89\x8e\x59\xf5\x9c\x0a\x12\xe6\x21\x14\xc6\x52\x86\x8b\x2f\xf5\xbf\x27\xd8\x43\x9d\x0e\xeb\x95\xee\x89\x77\x2f\xce\xde\x6c\x60\x29\x0d\x99\x8f\x50\x77\x48\xb0\x98\x4a\x1d\xdd\xa0\xe8\xbc\x2b\x94\x29\x85\xba\xb2\xfd\x17\x48\x3b\xfb\x06\xd1\xce\xfa\xe4\x87\x65\xc2\xf9\xc7\x7d\x92\xd1\x6c\xd1\x2a\x91\x42\x45\x09\x6b\xc1\x7d\xa7\xab\xaa\xfc\x44\x13\xe7\x37\x6a\x1b\x45\x20\x87\x7d\x94\x2d\xbf\x86\xf8\x26\xc4\xeb\xc3\xc3\xe2\xf5\xee\x2e\x3c\xc9\x7f\x82\x6d\x87\x9f\x3b\x1a\xc0\xaa\x0f\x84\xe7\x34\x2a\x51\x34\x43\x1d\x7e\xe7\x7b\xd1\xec\x32\xb4\x74\x63\x78\x53\x07\xba\xaf\x30\xa3\x95\x67\xd1\x05\xbe\xd5\x6e\xb0\x65\xbc\xb1\x8c\xbe\x06\xac\xaa\x8c\x41\x69\x24\x8d\x97\xf1\xee\x66\x4c\x2b\xf6\xbb\x29\xdd\x3b\x5d\x16\x8c\x51\x65\x4b\x77\x41\xe6\x8a\x40\xa3\x72\x8b\xfa\xc7\x2f\xbd\x25\x13\x8a\x46\xa6\xa7\xce\x43\x46\x11\x66\x66\xce\x56\x05\x4d\x59\xfe\x80\xf3\xee\xee\x6d\xe5\x13\x56\x46\x44\xde\xea\xb2\xbb\xbb\xe1\x72\x73\xc8\xf1\x40\xd4\x08\xab\x83\x90\x19\x7d\xc3\xc0\x38\xf0\xf8\x7f\x3f\x0c\x45\xdd\xe6\xdf\xba\xe1\x6e\x50\xc3\x16\xfb\x3e\x63\xa3\x23\xb1\x95\x0c\x37\xd7\x3f\x01\x00\x00\xff\xff\xf1\x8e\xc7\xac\x2f\x0b\x00\x00"

func dataCommonDevVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevVagrantfileTpl,
		"data/common/dev/Vagrantfile.tpl",
	)
}

func dataCommonDevVagrantfileTpl() (*asset, error) {
	bytes, err := dataCommonDevVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/aws-simple/build/build-node.sh.tpl": dataAwsSimpleBuildBuildNodeShTpl,
	"data/aws-simple/build/template.json.tpl": dataAwsSimpleBuildTemplateJsonTpl,
	"data/aws-simple/deploy/main.tf.tpl": dataAwsSimpleDeployMainTfTpl,
	"data/common/dev/Vagrantfile.tpl": dataCommonDevVagrantfileTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"aws-simple": &bintree{nil, map[string]*bintree{
			"build": &bintree{nil, map[string]*bintree{
				"build-node.sh.tpl": &bintree{dataAwsSimpleBuildBuildNodeShTpl, map[string]*bintree{
				}},
				"template.json.tpl": &bintree{dataAwsSimpleBuildTemplateJsonTpl, map[string]*bintree{
				}},
			}},
			"deploy": &bintree{nil, map[string]*bintree{
				"main.tf.tpl": &bintree{dataAwsSimpleDeployMainTfTpl, map[string]*bintree{
				}},
			}},
		}},
		"common": &bintree{nil, map[string]*bintree{
			"dev": &bintree{nil, map[string]*bintree{
				"Vagrantfile.tpl": &bintree{dataCommonDevVagrantfileTpl, map[string]*bintree{
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

