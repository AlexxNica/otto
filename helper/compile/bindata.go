// Code generated by go-bindata.
// sources:
// data/app/dev/Vagrantfile.tpl
// DO NOT EDIT!

package compile

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAppDevVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\xdb\x6a\xe4\x38\x10\x7d\xef\xaf\xa8\x75\x93\x1b\x74\xdc\xbb\x61\xd9\x87\x40\x1e\x96\x65\x6f\xb0\xb0\x0f\x09\xf3\x32\x0c\x46\xb6\xca\xb6\x88\xad\x12\xba\xb8\xa7\xe9\xf8\xdf\xa7\x24\xb5\xbb\x73\x19\x18\x08\x44\x2e\x1d\x9d\xaa\x3a\x75\xaa\xd7\xf0\x37\x6a\xb4\xc2\xa3\x84\x7a\x0f\xff\x7b\x4f\x1b\x90\x04\x9a\x3c\xa0\x54\xfe\xa7\xd5\x7a\xb5\x86\xa7\x5e\x39\xe0\x3f\xdf\x23\x7c\x12\x9d\x15\xda\xb7\x6a\x40\xe8\xde\xbf\x85\x96\x6c\x42\x49\x9c\x70\x20\x33\xa2\xf6\x40\x2d\x53\xf8\x48\x21\x8c\x19\x54\x23\xbc\x22\xbd\x75\x68\x27\xd5\x60\x09\xff\x7a\x70\x3d\x85\x41\xa6\xa4\x35\x42\x2f\xb4\xbc\x8d\xc9\x51\x96\xf0\x44\x30\x92\x54\xed\x3e\xd2\x32\xcf\xab\xf4\x1b\x08\x0e\x53\xb6\xdf\x8d\x89\x81\x72\xb5\x3a\x5e\x97\x0d\xe9\x56\x75\xc1\xe2\x75\x71\x57\xdc\xc4\x8e\x5e\x72\xe8\x65\x05\x90\x4f\xe5\x34\x96\x35\x7d\x85\x07\x28\x7a\xe1\x7a\xd5\x90\x35\x5b\x63\xb1\x51\x0e\x7f\xfb\xb5\x78\x83\x33\x96\x26\x25\xd1\xc2\xbd\x11\x56\x0c\x03\x0e\x2e\x71\x9a\x0d\x50\x64\x04\xa0\x57\x74\x27\xcc\x36\xd4\x41\xfb\x70\xfb\xcb\x5d\xf9\x73\x62\x44\x2d\x57\xfc\xef\x70\x01\xf5\x40\xcd\x33\xcb\xd4\x8a\x30\xf8\xca\xf5\xc2\xa2\xac\x5a\x1a\x62\x92\x8b\x99\x31\x6b\x78\x44\x1f\x0c\x08\x70\x7b\xdd\xb0\xc4\xc7\xcb\xd6\xd2\x08\x14\x2c\xec\xc8\x3e\x2b\xdd\x81\x54\x5c\xb3\x27\xcb\x0a\x11\x6c\xa7\x2c\xc0\x9b\xea\x33\xc1\xc2\x7e\x75\x38\x80\x11\xbe\x2f\x17\x82\x79\xbe\xda\x40\xb1\xbc\x2c\x36\xb9\x9f\x1d\x8f\xf6\x1e\x8a\x53\x14\x3a\x4b\xc1\xbc\x8a\xe4\x3e\xb8\xa3\xdc\x0a\x17\x9d\xaa\xfe\x53\x8b\x9a\xad\xf1\xf8\xf8\x0f\x88\x2e\x8e\x9f\x2d\xb1\x13\x56\xc6\x4c\x8e\xd8\x32\xde\xc7\xa3\xb1\x6a\x62\xe7\xb0\x02\x86\x29\x50\x37\x0a\x5d\x6a\xc9\x9d\x4b\x77\xae\x2f\x8f\xaf\xab\xcc\xf5\x00\xde\x06\xcc\x89\xfe\xa2\xa0\x65\xf2\x12\x2c\xd3\xce\x5f\xd7\xaa\x05\xa1\xf7\x37\xb9\xc0\xe8\x48\x96\x08\x94\xe6\xe3\xf2\xa2\xe2\x88\x2b\xd9\xa4\x59\xeb\x78\xcf\x73\xdb\x12\x5b\x78\x7b\x46\xdd\xb2\x52\xfc\x7c\x20\x32\xe5\x1f\x1c\xf5\xac\xde\x3c\x17\x3f\xd0\x36\x92\x25\x49\xf9\xf0\xd1\x44\x2e\x56\x58\xb8\x1e\x87\x81\x35\x55\x7a\x50\x1a\x59\xd4\x46\xc2\xfa\xc0\x0f\x66\xb8\xbc\x84\x9a\xed\x78\xfc\xdc\x8e\x42\xe9\xd2\xf5\x67\xb5\x63\x3f\x8b\xd6\xff\x91\x90\xc0\x56\x4b\x7e\x68\xad\xe8\xe2\xbe\x39\xe8\xd1\x62\xea\x9b\x55\x78\x23\x70\x79\x96\x64\x41\x47\x5d\x58\x87\xea\xfc\x3a\x29\x12\x3b\x3f\x46\x5e\x2c\x72\x96\x79\xfe\x6e\x05\xa7\x5f\x06\x4a\xc3\x03\x61\xa3\x7a\x3c\xe8\x11\xa1\x0e\x9d\x03\xab\xba\xde\xf3\x66\xef\x18\xfe\xb9\x98\x46\x1e\x26\x56\x6d\x88\x32\x70\xff\x4b\x20\x0d\xde\x27\xd1\x8b\x2f\x25\x8a\xa6\x4f\xeb\xa5\xc5\x88\x79\xbd\x3e\xae\xe2\x75\xbc\xcc\x9b\x6d\x32\x06\xc0\x94\x98\xdc\x57\x4d\xa3\x0d\xba\x52\xa6\xe2\xd9\x3d\xf3\x12\x3d\x40\x2b\x06\x87\x09\x16\x77\xf0\xe3\x26\x1e\x5d\x5d\xe5\x44\xdc\xdf\x3b\x6f\x27\xfc\x09\xdd\x12\xf9\xb4\xa8\xef\x50\xdf\x02\x00\x00\xff\xff\x20\x50\x45\x00\x4f\x05\x00\x00"

func dataAppDevVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAppDevVagrantfileTpl,
		"data/app/dev/Vagrantfile.tpl",
	)
}

func dataAppDevVagrantfileTpl() (*asset, error) {
	bytes, err := dataAppDevVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/app/dev/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/app/dev/Vagrantfile.tpl": dataAppDevVagrantfileTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"app": &bintree{nil, map[string]*bintree{
			"dev": &bintree{nil, map[string]*bintree{
				"Vagrantfile.tpl": &bintree{dataAppDevVagrantfileTpl, map[string]*bintree{
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

